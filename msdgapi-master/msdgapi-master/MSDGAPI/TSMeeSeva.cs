//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using System.Configuration;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="MeesevaMobileWebserviceSoap", Namespace="http://TG.org/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
public partial class MeesevaMobileWebservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback NewUserRegistrationOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserProfileOperationCompleted;
    
    private System.Threading.SendOrPostCallback RESETMPINOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAadharDocumentRefDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDetailsByAadharNoDocumentpathOperationCompleted;
    
    private System.Threading.SendOrPostCallback GenerateApplicationNOOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetShowpaymentChargesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetIncomeTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetEBCTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetIntegratedTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetFamilyMembershipTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateCasteOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateCasteCategoryOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateOccupationOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateReasonforCertificateOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResidanceTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetNoEarningMemberTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPossessionTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAgriIncomeTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetOBCTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateDeathReasonOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateECDistrictOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateSROOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDocumentsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetECtransactionIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCDMATransNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateCDMABDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateCDMADDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServiceCharges_CDMAOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserProfileOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateCDMABirthDeathDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateCDMADeathDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchCDMABirthDetails_NEWOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateSurveyNumberOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateAdangaldetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateRORDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback CCGetDocDistOperationCompleted;
    
    private System.Threading.SendOrPostCallback CCGetDocSROOperationCompleted;
    
    private System.Threading.SendOrPostCallback CCGetYearOperationCompleted;
    
    private System.Threading.SendOrPostCallback CCGetDocListOperationCompleted;
    
    private System.Threading.SendOrPostCallback CCVerifySignOperationCompleted;
    
    private System.Threading.SendOrPostCallback CCGetDocFileOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserLoginResponseOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchCDMABirthDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback PopulateRUIDDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchCDMADeathDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServiceChargesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAdangalTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetROR1BTransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCDMATransactionNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback AadharUpdationforApplicationNoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetApplicationDetailsOperationCompleted;
    
    /// <remarks/>
    public MeesevaMobileWebservice() {
        string URL = ConfigurationManager.AppSettings["MEESEVA_MOB_SERVICE_URL"] ?? "";
        if (!string.IsNullOrEmpty(URL))
        {
            this.Url = URL;
        }
        else
        {
            this.Url = "http://staging.meeseva.gov.in/MEESEVAmobileWEBSERVICE/MEESEVAmobileWEBSERVICE.ASM" +
                "X";
        }
    }
    
    /// <remarks/>
    public event NewUserRegistrationCompletedEventHandler NewUserRegistrationCompleted;
    
    /// <remarks/>
    public event GetUserProfileCompletedEventHandler GetUserProfileCompleted;
    
    /// <remarks/>
    public event RESETMPINCompletedEventHandler RESETMPINCompleted;
    
    /// <remarks/>
    public event GetAadharDocumentRefDetailsCompletedEventHandler GetAadharDocumentRefDetailsCompleted;
    
    /// <remarks/>
    public event GetDetailsByAadharNoDocumentpathCompletedEventHandler GetDetailsByAadharNoDocumentpathCompleted;
    
    /// <remarks/>
    public event GenerateApplicationNOCompletedEventHandler GenerateApplicationNOCompleted;
    
    /// <remarks/>
    public event GetShowpaymentChargesCompletedEventHandler GetShowpaymentChargesCompleted;
    
    /// <remarks/>
    public event GetIncomeTransactionNoCompletedEventHandler GetIncomeTransactionNoCompleted;
    
    /// <remarks/>
    public event GetEBCTransactionNoCompletedEventHandler GetEBCTransactionNoCompleted;
    
    /// <remarks/>
    public event GetIntegratedTransactionNoCompletedEventHandler GetIntegratedTransactionNoCompleted;
    
    /// <remarks/>
    public event GetFamilyMembershipTransactionNoCompletedEventHandler GetFamilyMembershipTransactionNoCompleted;
    
    /// <remarks/>
    public event PopulateCasteCompletedEventHandler PopulateCasteCompleted;
    
    /// <remarks/>
    public event PopulateCasteCategoryCompletedEventHandler PopulateCasteCategoryCompleted;
    
    /// <remarks/>
    public event PopulateOccupationCompletedEventHandler PopulateOccupationCompleted;
    
    /// <remarks/>
    public event PopulateReasonforCertificateCompletedEventHandler PopulateReasonforCertificateCompleted;
    
    /// <remarks/>
    public event GetResidanceTransactionNoCompletedEventHandler GetResidanceTransactionNoCompleted;
    
    /// <remarks/>
    public event GetNoEarningMemberTransactionNoCompletedEventHandler GetNoEarningMemberTransactionNoCompleted;
    
    /// <remarks/>
    public event GetPossessionTransactionNoCompletedEventHandler GetPossessionTransactionNoCompleted;
    
    /// <remarks/>
    public event GetAgriIncomeTransactionNoCompletedEventHandler GetAgriIncomeTransactionNoCompleted;
    
    /// <remarks/>
    public event GetOBCTransactionNoCompletedEventHandler GetOBCTransactionNoCompleted;
    
    /// <remarks/>
    public event PopulateDeathReasonCompletedEventHandler PopulateDeathReasonCompleted;
    
    /// <remarks/>
    public event PopulateECDistrictCompletedEventHandler PopulateECDistrictCompleted;
    
    /// <remarks/>
    public event PopulateSROCompletedEventHandler PopulateSROCompleted;
    
    /// <remarks/>
    public event GetDocumentsCompletedEventHandler GetDocumentsCompleted;
    
    /// <remarks/>
    public event GetECtransactionIDCompletedEventHandler GetECtransactionIDCompleted;
    
    /// <remarks/>
    public event GetCDMATransNoCompletedEventHandler GetCDMATransNoCompleted;
    
    /// <remarks/>
    public event PopulateCDMABDetailsCompletedEventHandler PopulateCDMABDetailsCompleted;
    
    /// <remarks/>
    public event PopulateCDMADDetailsCompletedEventHandler PopulateCDMADDetailsCompleted;
    
    /// <remarks/>
    public event GetServiceCharges_CDMACompletedEventHandler GetServiceCharges_CDMACompleted;
    
    /// <remarks/>
    public event UpdateUserProfileCompletedEventHandler UpdateUserProfileCompleted;
    
    /// <remarks/>
    public event PopulateCDMABirthDeathDetailsCompletedEventHandler PopulateCDMABirthDeathDetailsCompleted;
    
    /// <remarks/>
    public event PopulateCDMADeathDetailsCompletedEventHandler PopulateCDMADeathDetailsCompleted;
    
    /// <remarks/>
    public event SearchCDMABirthDetails_NEWCompletedEventHandler SearchCDMABirthDetails_NEWCompleted;
    
    /// <remarks/>
    public event PopulateSurveyNumberCompletedEventHandler PopulateSurveyNumberCompleted;
    
    /// <remarks/>
    public event PopulateAdangaldetailsCompletedEventHandler PopulateAdangaldetailsCompleted;
    
    /// <remarks/>
    public event PopulateRORDetailsCompletedEventHandler PopulateRORDetailsCompleted;
    
    /// <remarks/>
    public event CCGetDocDistCompletedEventHandler CCGetDocDistCompleted;
    
    /// <remarks/>
    public event CCGetDocSROCompletedEventHandler CCGetDocSROCompleted;
    
    /// <remarks/>
    public event CCGetYearCompletedEventHandler CCGetYearCompleted;
    
    /// <remarks/>
    public event CCGetDocListCompletedEventHandler CCGetDocListCompleted;
    
    /// <remarks/>
    public event CCVerifySignCompletedEventHandler CCVerifySignCompleted;
    
    /// <remarks/>
    public event CCGetDocFileCompletedEventHandler CCGetDocFileCompleted;
    
    /// <remarks/>
    public event GetUserLoginResponseCompletedEventHandler GetUserLoginResponseCompleted;
    
    /// <remarks/>
    public event SearchCDMABirthDetailsCompletedEventHandler SearchCDMABirthDetailsCompleted;
    
    /// <remarks/>
    public event PopulateRUIDDetailsCompletedEventHandler PopulateRUIDDetailsCompleted;
    
    /// <remarks/>
    public event SearchCDMADeathDetailsCompletedEventHandler SearchCDMADeathDetailsCompleted;
    
    /// <remarks/>
    public event GetServiceChargesCompletedEventHandler GetServiceChargesCompleted;
    
    /// <remarks/>
    public event GetAdangalTransactionNoCompletedEventHandler GetAdangalTransactionNoCompleted;
    
    /// <remarks/>
    public event GetROR1BTransactionNoCompletedEventHandler GetROR1BTransactionNoCompleted;
    
    /// <remarks/>
    public event GetCDMATransactionNoCompletedEventHandler GetCDMATransactionNoCompleted;
    
    /// <remarks/>
    public event AadharUpdationforApplicationNoCompletedEventHandler AadharUpdationforApplicationNoCompleted;
    
    /// <remarks/>
    public event GetApplicationDetailsCompletedEventHandler GetApplicationDetailsCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/NewUserRegistration", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string NewUserRegistration(
                string userid, 
                string password, 
                string CustomerFirstname, 
                string CustomerLatsname, 
                string Gender, 
                string DOB, 
                int State, 
                string City, 
                string AddressLine1, 
                string AddressLine2, 
                string Pincode, 
                string Emailid, 
                string LoginId, 
                string Loginpassword, 
                string SystemIP, 
                string Adharno) {
        object[] results = this.Invoke("NewUserRegistration", new object[] {
                    userid,
                    password,
                    CustomerFirstname,
                    CustomerLatsname,
                    Gender,
                    DOB,
                    State,
                    City,
                    AddressLine1,
                    AddressLine2,
                    Pincode,
                    Emailid,
                    LoginId,
                    Loginpassword,
                    SystemIP,
                    Adharno});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNewUserRegistration(
                string userid, 
                string password, 
                string CustomerFirstname, 
                string CustomerLatsname, 
                string Gender, 
                string DOB, 
                int State, 
                string City, 
                string AddressLine1, 
                string AddressLine2, 
                string Pincode, 
                string Emailid, 
                string LoginId, 
                string Loginpassword, 
                string SystemIP, 
                string Adharno, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("NewUserRegistration", new object[] {
                    userid,
                    password,
                    CustomerFirstname,
                    CustomerLatsname,
                    Gender,
                    DOB,
                    State,
                    City,
                    AddressLine1,
                    AddressLine2,
                    Pincode,
                    Emailid,
                    LoginId,
                    Loginpassword,
                    SystemIP,
                    Adharno}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndNewUserRegistration(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void NewUserRegistrationAsync(
                string userid, 
                string password, 
                string CustomerFirstname, 
                string CustomerLatsname, 
                string Gender, 
                string DOB, 
                int State, 
                string City, 
                string AddressLine1, 
                string AddressLine2, 
                string Pincode, 
                string Emailid, 
                string LoginId, 
                string Loginpassword, 
                string SystemIP, 
                string Adharno) {
        this.NewUserRegistrationAsync(userid, password, CustomerFirstname, CustomerLatsname, Gender, DOB, State, City, AddressLine1, AddressLine2, Pincode, Emailid, LoginId, Loginpassword, SystemIP, Adharno, null);
    }
    
    /// <remarks/>
    public void NewUserRegistrationAsync(
                string userid, 
                string password, 
                string CustomerFirstname, 
                string CustomerLatsname, 
                string Gender, 
                string DOB, 
                int State, 
                string City, 
                string AddressLine1, 
                string AddressLine2, 
                string Pincode, 
                string Emailid, 
                string LoginId, 
                string Loginpassword, 
                string SystemIP, 
                string Adharno, 
                object userState) {
        if ((this.NewUserRegistrationOperationCompleted == null)) {
            this.NewUserRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewUserRegistrationOperationCompleted);
        }
        this.InvokeAsync("NewUserRegistration", new object[] {
                    userid,
                    password,
                    CustomerFirstname,
                    CustomerLatsname,
                    Gender,
                    DOB,
                    State,
                    City,
                    AddressLine1,
                    AddressLine2,
                    Pincode,
                    Emailid,
                    LoginId,
                    Loginpassword,
                    SystemIP,
                    Adharno}, this.NewUserRegistrationOperationCompleted, userState);
    }
    
    private void OnNewUserRegistrationOperationCompleted(object arg) {
        if ((this.NewUserRegistrationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NewUserRegistrationCompleted(this, new NewUserRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetUserProfile", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetUserProfile(string UserId, string Password, string LoginId) {
        object[] results = this.Invoke("GetUserProfile", new object[] {
                    UserId,
                    Password,
                    LoginId});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserProfile(string UserId, string Password, string LoginId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserProfile", new object[] {
                    UserId,
                    Password,
                    LoginId}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetUserProfile(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserProfileAsync(string UserId, string Password, string LoginId) {
        this.GetUserProfileAsync(UserId, Password, LoginId, null);
    }
    
    /// <remarks/>
    public void GetUserProfileAsync(string UserId, string Password, string LoginId, object userState) {
        if ((this.GetUserProfileOperationCompleted == null)) {
            this.GetUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserProfileOperationCompleted);
        }
        this.InvokeAsync("GetUserProfile", new object[] {
                    UserId,
                    Password,
                    LoginId}, this.GetUserProfileOperationCompleted, userState);
    }
    
    private void OnGetUserProfileOperationCompleted(object arg) {
        if ((this.GetUserProfileCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserProfileCompleted(this, new GetUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/RESETMPIN", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool RESETMPIN(string UserId, string Password, string LoginId, string NewMpin) {
        object[] results = this.Invoke("RESETMPIN", new object[] {
                    UserId,
                    Password,
                    LoginId,
                    NewMpin});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRESETMPIN(string UserId, string Password, string LoginId, string NewMpin, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RESETMPIN", new object[] {
                    UserId,
                    Password,
                    LoginId,
                    NewMpin}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndRESETMPIN(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void RESETMPINAsync(string UserId, string Password, string LoginId, string NewMpin) {
        this.RESETMPINAsync(UserId, Password, LoginId, NewMpin, null);
    }
    
    /// <remarks/>
    public void RESETMPINAsync(string UserId, string Password, string LoginId, string NewMpin, object userState) {
        if ((this.RESETMPINOperationCompleted == null)) {
            this.RESETMPINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRESETMPINOperationCompleted);
        }
        this.InvokeAsync("RESETMPIN", new object[] {
                    UserId,
                    Password,
                    LoginId,
                    NewMpin}, this.RESETMPINOperationCompleted, userState);
    }
    
    private void OnRESETMPINOperationCompleted(object arg) {
        if ((this.RESETMPINCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RESETMPINCompleted(this, new RESETMPINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetAadharDocumentRefDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetAadharDocumentRefDetails(string UserId, string Password, string LogindID, string ServiceID) {
        object[] results = this.Invoke("GetAadharDocumentRefDetails", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAadharDocumentRefDetails(string UserId, string Password, string LogindID, string ServiceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAadharDocumentRefDetails", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetAadharDocumentRefDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetAadharDocumentRefDetailsAsync(string UserId, string Password, string LogindID, string ServiceID) {
        this.GetAadharDocumentRefDetailsAsync(UserId, Password, LogindID, ServiceID, null);
    }
    
    /// <remarks/>
    public void GetAadharDocumentRefDetailsAsync(string UserId, string Password, string LogindID, string ServiceID, object userState) {
        if ((this.GetAadharDocumentRefDetailsOperationCompleted == null)) {
            this.GetAadharDocumentRefDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAadharDocumentRefDetailsOperationCompleted);
        }
        this.InvokeAsync("GetAadharDocumentRefDetails", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID}, this.GetAadharDocumentRefDetailsOperationCompleted, userState);
    }
    
    private void OnGetAadharDocumentRefDetailsOperationCompleted(object arg) {
        if ((this.GetAadharDocumentRefDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAadharDocumentRefDetailsCompleted(this, new GetAadharDocumentRefDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetDetailsByAadharNoDocumentpath", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetDetailsByAadharNoDocumentpath(string UserId, string Password, string LogindID, string ServiceID, string AadhaarNo, string DocumentReferenceNo) {
        object[] results = this.Invoke("GetDetailsByAadharNoDocumentpath", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    AadhaarNo,
                    DocumentReferenceNo});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetDetailsByAadharNoDocumentpath(string UserId, string Password, string LogindID, string ServiceID, string AadhaarNo, string DocumentReferenceNo, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDetailsByAadharNoDocumentpath", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    AadhaarNo,
                    DocumentReferenceNo}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetDetailsByAadharNoDocumentpath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetDetailsByAadharNoDocumentpathAsync(string UserId, string Password, string LogindID, string ServiceID, string AadhaarNo, string DocumentReferenceNo) {
        this.GetDetailsByAadharNoDocumentpathAsync(UserId, Password, LogindID, ServiceID, AadhaarNo, DocumentReferenceNo, null);
    }
    
    /// <remarks/>
    public void GetDetailsByAadharNoDocumentpathAsync(string UserId, string Password, string LogindID, string ServiceID, string AadhaarNo, string DocumentReferenceNo, object userState) {
        if ((this.GetDetailsByAadharNoDocumentpathOperationCompleted == null)) {
            this.GetDetailsByAadharNoDocumentpathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDetailsByAadharNoDocumentpathOperationCompleted);
        }
        this.InvokeAsync("GetDetailsByAadharNoDocumentpath", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    AadhaarNo,
                    DocumentReferenceNo}, this.GetDetailsByAadharNoDocumentpathOperationCompleted, userState);
    }
    
    private void OnGetDetailsByAadharNoDocumentpathOperationCompleted(object arg) {
        if ((this.GetDetailsByAadharNoDocumentpathCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDetailsByAadharNoDocumentpathCompleted(this, new GetDetailsByAadharNoDocumentpathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GenerateApplicationNO", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GenerateApplicationNO(string UserId, string Password, string LogindID, string ServiceID) {
        object[] results = this.Invoke("GenerateApplicationNO", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGenerateApplicationNO(string UserId, string Password, string LogindID, string ServiceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GenerateApplicationNO", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGenerateApplicationNO(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GenerateApplicationNOAsync(string UserId, string Password, string LogindID, string ServiceID) {
        this.GenerateApplicationNOAsync(UserId, Password, LogindID, ServiceID, null);
    }
    
    /// <remarks/>
    public void GenerateApplicationNOAsync(string UserId, string Password, string LogindID, string ServiceID, object userState) {
        if ((this.GenerateApplicationNOOperationCompleted == null)) {
            this.GenerateApplicationNOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateApplicationNOOperationCompleted);
        }
        this.InvokeAsync("GenerateApplicationNO", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID}, this.GenerateApplicationNOOperationCompleted, userState);
    }
    
    private void OnGenerateApplicationNOOperationCompleted(object arg) {
        if ((this.GenerateApplicationNOCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GenerateApplicationNOCompleted(this, new GenerateApplicationNOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetShowpaymentCharges", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetShowpaymentCharges(string UserId, string Password, string LogindID, string ServiceID, string ApplicationNo, string DeliveryType) {
        object[] results = this.Invoke("GetShowpaymentCharges", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    ApplicationNo,
                    DeliveryType});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetShowpaymentCharges(string UserId, string Password, string LogindID, string ServiceID, string ApplicationNo, string DeliveryType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetShowpaymentCharges", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    ApplicationNo,
                    DeliveryType}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetShowpaymentCharges(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetShowpaymentChargesAsync(string UserId, string Password, string LogindID, string ServiceID, string ApplicationNo, string DeliveryType) {
        this.GetShowpaymentChargesAsync(UserId, Password, LogindID, ServiceID, ApplicationNo, DeliveryType, null);
    }
    
    /// <remarks/>
    public void GetShowpaymentChargesAsync(string UserId, string Password, string LogindID, string ServiceID, string ApplicationNo, string DeliveryType, object userState) {
        if ((this.GetShowpaymentChargesOperationCompleted == null)) {
            this.GetShowpaymentChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetShowpaymentChargesOperationCompleted);
        }
        this.InvokeAsync("GetShowpaymentCharges", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    ApplicationNo,
                    DeliveryType}, this.GetShowpaymentChargesOperationCompleted, userState);
    }
    
    private void OnGetShowpaymentChargesOperationCompleted(object arg) {
        if ((this.GetShowpaymentChargesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetShowpaymentChargesCompleted(this, new GetShowpaymentChargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetIncomeTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetIncomeTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string LandIncome, 
                string BusinessIncome, 
                string BuildingIncome, 
                string LabourIncome, 
                string EmpSal, 
                string OtherIncome, 
                string TotalIncome, 
                string Purpose, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        object[] results = this.Invoke("GetIncomeTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    LandIncome,
                    BusinessIncome,
                    BuildingIncome,
                    LabourIncome,
                    EmpSal,
                    OtherIncome,
                    TotalIncome,
                    Purpose,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetIncomeTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string LandIncome, 
                string BusinessIncome, 
                string BuildingIncome, 
                string LabourIncome, 
                string EmpSal, 
                string OtherIncome, 
                string TotalIncome, 
                string Purpose, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetIncomeTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    LandIncome,
                    BusinessIncome,
                    BuildingIncome,
                    LabourIncome,
                    EmpSal,
                    OtherIncome,
                    TotalIncome,
                    Purpose,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetIncomeTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetIncomeTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string LandIncome, 
                string BusinessIncome, 
                string BuildingIncome, 
                string LabourIncome, 
                string EmpSal, 
                string OtherIncome, 
                string TotalIncome, 
                string Purpose, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        this.GetIncomeTransactionNoAsync(UserId, Password, LogindID, ServiceID, DocumentRefNumbers, AddressFlag, ApplicationNo, DeliveryType, LandIncome, BusinessIncome, BuildingIncome, LabourIncome, EmpSal, OtherIncome, TotalIncome, Purpose, StateId, Service_Charge, User_charges, Postal_Charge, Total_Amount, null);
    }
    
    /// <remarks/>
    public void GetIncomeTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string LandIncome, 
                string BusinessIncome, 
                string BuildingIncome, 
                string LabourIncome, 
                string EmpSal, 
                string OtherIncome, 
                string TotalIncome, 
                string Purpose, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                object userState) {
        if ((this.GetIncomeTransactionNoOperationCompleted == null)) {
            this.GetIncomeTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIncomeTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetIncomeTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    LandIncome,
                    BusinessIncome,
                    BuildingIncome,
                    LabourIncome,
                    EmpSal,
                    OtherIncome,
                    TotalIncome,
                    Purpose,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, this.GetIncomeTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetIncomeTransactionNoOperationCompleted(object arg) {
        if ((this.GetIncomeTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetIncomeTransactionNoCompleted(this, new GetIncomeTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetEBCTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetEBCTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string Religion, 
                string PurposeofCasteCertificate, 
                string FamilyIncome, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        object[] results = this.Invoke("GetEBCTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    Remarks,
                    IssuedCasteCertificateInPast,
                    CasteClaimed,
                    CasteCategory,
                    Religion,
                    PurposeofCasteCertificate,
                    FamilyIncome,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEBCTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string Religion, 
                string PurposeofCasteCertificate, 
                string FamilyIncome, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetEBCTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    Remarks,
                    IssuedCasteCertificateInPast,
                    CasteClaimed,
                    CasteCategory,
                    Religion,
                    PurposeofCasteCertificate,
                    FamilyIncome,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetEBCTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetEBCTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string Religion, 
                string PurposeofCasteCertificate, 
                string FamilyIncome, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        this.GetEBCTransactionNoAsync(UserId, Password, LogindID, ServiceID, DocumentRefNumbers, AddressFlag, ApplicationNo, DeliveryType, Relation, RelationName, Remarks, IssuedCasteCertificateInPast, CasteClaimed, CasteCategory, Religion, PurposeofCasteCertificate, FamilyIncome, StateId, Service_Charge, User_charges, Postal_Charge, Total_Amount, null);
    }
    
    /// <remarks/>
    public void GetEBCTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string Religion, 
                string PurposeofCasteCertificate, 
                string FamilyIncome, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                object userState) {
        if ((this.GetEBCTransactionNoOperationCompleted == null)) {
            this.GetEBCTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEBCTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetEBCTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    Remarks,
                    IssuedCasteCertificateInPast,
                    CasteClaimed,
                    CasteCategory,
                    Religion,
                    PurposeofCasteCertificate,
                    FamilyIncome,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, this.GetEBCTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetEBCTransactionNoOperationCompleted(object arg) {
        if ((this.GetEBCTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetEBCTransactionNoCompleted(this, new GetEBCTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetIntegratedTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetIntegratedTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string EducationCertificateContainsCaste, 
                string PurposeofCasteCertificate, 
                string Religion, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        object[] results = this.Invoke("GetIntegratedTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    Remarks,
                    IssuedCasteCertificateInPast,
                    CasteClaimed,
                    CasteCategory,
                    EducationCertificateContainsCaste,
                    PurposeofCasteCertificate,
                    Religion,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetIntegratedTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string EducationCertificateContainsCaste, 
                string PurposeofCasteCertificate, 
                string Religion, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetIntegratedTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    Remarks,
                    IssuedCasteCertificateInPast,
                    CasteClaimed,
                    CasteCategory,
                    EducationCertificateContainsCaste,
                    PurposeofCasteCertificate,
                    Religion,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetIntegratedTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetIntegratedTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string EducationCertificateContainsCaste, 
                string PurposeofCasteCertificate, 
                string Religion, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        this.GetIntegratedTransactionNoAsync(UserId, Password, LogindID, ServiceID, DocumentRefNumbers, AddressFlag, ApplicationNo, DeliveryType, Relation, RelationName, Remarks, IssuedCasteCertificateInPast, CasteClaimed, CasteCategory, EducationCertificateContainsCaste, PurposeofCasteCertificate, Religion, StateId, Service_Charge, User_charges, Postal_Charge, Total_Amount, null);
    }
    
    /// <remarks/>
    public void GetIntegratedTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string EducationCertificateContainsCaste, 
                string PurposeofCasteCertificate, 
                string Religion, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                object userState) {
        if ((this.GetIntegratedTransactionNoOperationCompleted == null)) {
            this.GetIntegratedTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIntegratedTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetIntegratedTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    Remarks,
                    IssuedCasteCertificateInPast,
                    CasteClaimed,
                    CasteCategory,
                    EducationCertificateContainsCaste,
                    PurposeofCasteCertificate,
                    Religion,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, this.GetIntegratedTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetIntegratedTransactionNoOperationCompleted(object arg) {
        if ((this.GetIntegratedTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetIntegratedTransactionNoCompleted(this, new GetIntegratedTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetFamilyMembershipTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetFamilyMembershipTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Servicetype, 
                string Relation, 
                string RelationName, 
                string WorkStatus, 
                string DeceasedName, 
                string DeceasedFName, 
                string DateofDeath, 
                string ReasonforDeath, 
                string Occupation, 
                string ReasonforCertificate, 
                string DeathPlace, 
                string GridFamilyMemberDetails, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        object[] results = this.Invoke("GetFamilyMembershipTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Servicetype,
                    Relation,
                    RelationName,
                    WorkStatus,
                    DeceasedName,
                    DeceasedFName,
                    DateofDeath,
                    ReasonforDeath,
                    Occupation,
                    ReasonforCertificate,
                    DeathPlace,
                    GridFamilyMemberDetails,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetFamilyMembershipTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Servicetype, 
                string Relation, 
                string RelationName, 
                string WorkStatus, 
                string DeceasedName, 
                string DeceasedFName, 
                string DateofDeath, 
                string ReasonforDeath, 
                string Occupation, 
                string ReasonforCertificate, 
                string DeathPlace, 
                string GridFamilyMemberDetails, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetFamilyMembershipTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Servicetype,
                    Relation,
                    RelationName,
                    WorkStatus,
                    DeceasedName,
                    DeceasedFName,
                    DateofDeath,
                    ReasonforDeath,
                    Occupation,
                    ReasonforCertificate,
                    DeathPlace,
                    GridFamilyMemberDetails,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetFamilyMembershipTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetFamilyMembershipTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Servicetype, 
                string Relation, 
                string RelationName, 
                string WorkStatus, 
                string DeceasedName, 
                string DeceasedFName, 
                string DateofDeath, 
                string ReasonforDeath, 
                string Occupation, 
                string ReasonforCertificate, 
                string DeathPlace, 
                string GridFamilyMemberDetails, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        this.GetFamilyMembershipTransactionNoAsync(UserId, Password, LogindID, ServiceID, DocumentRefNumbers, AddressFlag, ApplicationNo, DeliveryType, Servicetype, Relation, RelationName, WorkStatus, DeceasedName, DeceasedFName, DateofDeath, ReasonforDeath, Occupation, ReasonforCertificate, DeathPlace, GridFamilyMemberDetails, StateId, Service_Charge, User_charges, Postal_Charge, Total_Amount, null);
    }
    
    /// <remarks/>
    public void GetFamilyMembershipTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Servicetype, 
                string Relation, 
                string RelationName, 
                string WorkStatus, 
                string DeceasedName, 
                string DeceasedFName, 
                string DateofDeath, 
                string ReasonforDeath, 
                string Occupation, 
                string ReasonforCertificate, 
                string DeathPlace, 
                string GridFamilyMemberDetails, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                object userState) {
        if ((this.GetFamilyMembershipTransactionNoOperationCompleted == null)) {
            this.GetFamilyMembershipTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFamilyMembershipTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetFamilyMembershipTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Servicetype,
                    Relation,
                    RelationName,
                    WorkStatus,
                    DeceasedName,
                    DeceasedFName,
                    DateofDeath,
                    ReasonforDeath,
                    Occupation,
                    ReasonforCertificate,
                    DeathPlace,
                    GridFamilyMemberDetails,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, this.GetFamilyMembershipTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetFamilyMembershipTransactionNoOperationCompleted(object arg) {
        if ((this.GetFamilyMembershipTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetFamilyMembershipTransactionNoCompleted(this, new GetFamilyMembershipTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateCaste", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet PopulateCaste(string UserId, string Password, string ServiceID) {
        object[] results = this.Invoke("PopulateCaste", new object[] {
                    UserId,
                    Password,
                    ServiceID});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateCaste(string UserId, string Password, string ServiceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateCaste", new object[] {
                    UserId,
                    Password,
                    ServiceID}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndPopulateCaste(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateCasteAsync(string UserId, string Password, string ServiceID) {
        this.PopulateCasteAsync(UserId, Password, ServiceID, null);
    }
    
    /// <remarks/>
    public void PopulateCasteAsync(string UserId, string Password, string ServiceID, object userState) {
        if ((this.PopulateCasteOperationCompleted == null)) {
            this.PopulateCasteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateCasteOperationCompleted);
        }
        this.InvokeAsync("PopulateCaste", new object[] {
                    UserId,
                    Password,
                    ServiceID}, this.PopulateCasteOperationCompleted, userState);
    }
    
    private void OnPopulateCasteOperationCompleted(object arg) {
        if ((this.PopulateCasteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateCasteCompleted(this, new PopulateCasteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateCasteCategory", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet PopulateCasteCategory(string UserId, string Password, string ServiceID, string CasteClaimed) {
        object[] results = this.Invoke("PopulateCasteCategory", new object[] {
                    UserId,
                    Password,
                    ServiceID,
                    CasteClaimed});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateCasteCategory(string UserId, string Password, string ServiceID, string CasteClaimed, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateCasteCategory", new object[] {
                    UserId,
                    Password,
                    ServiceID,
                    CasteClaimed}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndPopulateCasteCategory(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateCasteCategoryAsync(string UserId, string Password, string ServiceID, string CasteClaimed) {
        this.PopulateCasteCategoryAsync(UserId, Password, ServiceID, CasteClaimed, null);
    }
    
    /// <remarks/>
    public void PopulateCasteCategoryAsync(string UserId, string Password, string ServiceID, string CasteClaimed, object userState) {
        if ((this.PopulateCasteCategoryOperationCompleted == null)) {
            this.PopulateCasteCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateCasteCategoryOperationCompleted);
        }
        this.InvokeAsync("PopulateCasteCategory", new object[] {
                    UserId,
                    Password,
                    ServiceID,
                    CasteClaimed}, this.PopulateCasteCategoryOperationCompleted, userState);
    }
    
    private void OnPopulateCasteCategoryOperationCompleted(object arg) {
        if ((this.PopulateCasteCategoryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateCasteCategoryCompleted(this, new PopulateCasteCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateOccupation", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet PopulateOccupation(string UserId, string Password, string ServiceType) {
        object[] results = this.Invoke("PopulateOccupation", new object[] {
                    UserId,
                    Password,
                    ServiceType});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateOccupation(string UserId, string Password, string ServiceType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateOccupation", new object[] {
                    UserId,
                    Password,
                    ServiceType}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndPopulateOccupation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateOccupationAsync(string UserId, string Password, string ServiceType) {
        this.PopulateOccupationAsync(UserId, Password, ServiceType, null);
    }
    
    /// <remarks/>
    public void PopulateOccupationAsync(string UserId, string Password, string ServiceType, object userState) {
        if ((this.PopulateOccupationOperationCompleted == null)) {
            this.PopulateOccupationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateOccupationOperationCompleted);
        }
        this.InvokeAsync("PopulateOccupation", new object[] {
                    UserId,
                    Password,
                    ServiceType}, this.PopulateOccupationOperationCompleted, userState);
    }
    
    private void OnPopulateOccupationOperationCompleted(object arg) {
        if ((this.PopulateOccupationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateOccupationCompleted(this, new PopulateOccupationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateReasonforCertificate", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet PopulateReasonforCertificate(string UserId, string Password, string ServiceType) {
        object[] results = this.Invoke("PopulateReasonforCertificate", new object[] {
                    UserId,
                    Password,
                    ServiceType});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateReasonforCertificate(string UserId, string Password, string ServiceType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateReasonforCertificate", new object[] {
                    UserId,
                    Password,
                    ServiceType}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndPopulateReasonforCertificate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateReasonforCertificateAsync(string UserId, string Password, string ServiceType) {
        this.PopulateReasonforCertificateAsync(UserId, Password, ServiceType, null);
    }
    
    /// <remarks/>
    public void PopulateReasonforCertificateAsync(string UserId, string Password, string ServiceType, object userState) {
        if ((this.PopulateReasonforCertificateOperationCompleted == null)) {
            this.PopulateReasonforCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateReasonforCertificateOperationCompleted);
        }
        this.InvokeAsync("PopulateReasonforCertificate", new object[] {
                    UserId,
                    Password,
                    ServiceType}, this.PopulateReasonforCertificateOperationCompleted, userState);
    }
    
    private void OnPopulateReasonforCertificateOperationCompleted(object arg) {
        if ((this.PopulateReasonforCertificateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateReasonforCertificateCompleted(this, new PopulateReasonforCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetResidanceTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetResidanceTransactionNo(string UserId, string Password, string LogindID, string ServiceID, string DocumentRefNumbers, string AddressFlag, string ApplicationNo, string DeliveryType, string ResidingSinceinYears, string Purpose, string StateId, string Service_Charge, string User_charges, string Postal_Charge, string Total_Amount) {
        object[] results = this.Invoke("GetResidanceTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    ResidingSinceinYears,
                    Purpose,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResidanceTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string ResidingSinceinYears, 
                string Purpose, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetResidanceTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    ResidingSinceinYears,
                    Purpose,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetResidanceTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetResidanceTransactionNoAsync(string UserId, string Password, string LogindID, string ServiceID, string DocumentRefNumbers, string AddressFlag, string ApplicationNo, string DeliveryType, string ResidingSinceinYears, string Purpose, string StateId, string Service_Charge, string User_charges, string Postal_Charge, string Total_Amount) {
        this.GetResidanceTransactionNoAsync(UserId, Password, LogindID, ServiceID, DocumentRefNumbers, AddressFlag, ApplicationNo, DeliveryType, ResidingSinceinYears, Purpose, StateId, Service_Charge, User_charges, Postal_Charge, Total_Amount, null);
    }
    
    /// <remarks/>
    public void GetResidanceTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string ResidingSinceinYears, 
                string Purpose, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                object userState) {
        if ((this.GetResidanceTransactionNoOperationCompleted == null)) {
            this.GetResidanceTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResidanceTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetResidanceTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    ResidingSinceinYears,
                    Purpose,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, this.GetResidanceTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetResidanceTransactionNoOperationCompleted(object arg) {
        if ((this.GetResidanceTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResidanceTransactionNoCompleted(this, new GetResidanceTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetNoEarningMemberTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetNoEarningMemberTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string AppMaritalstatus, 
                string AppRelation, 
                string AppParentstatus, 
                string RelationName, 
                string RelationshipWithDeceased, 
                string DeceasedStatus, 
                string DeceasedName, 
                string DeceasedFatherHusbandName, 
                string DeceasedDoorNo, 
                string DateofDeath, 
                string Occupation, 
                string ReasonforCertificate, 
                string DeathHappenedDistrict, 
                string DeathHappenedMandal, 
                string DeathHappenedVillage, 
                string ReasonforDeath, 
                string DeathHappenedPlace, 
                string GridNoEarningMemberDetails, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        object[] results = this.Invoke("GetNoEarningMemberTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    AppMaritalstatus,
                    AppRelation,
                    AppParentstatus,
                    RelationName,
                    RelationshipWithDeceased,
                    DeceasedStatus,
                    DeceasedName,
                    DeceasedFatherHusbandName,
                    DeceasedDoorNo,
                    DateofDeath,
                    Occupation,
                    ReasonforCertificate,
                    DeathHappenedDistrict,
                    DeathHappenedMandal,
                    DeathHappenedVillage,
                    ReasonforDeath,
                    DeathHappenedPlace,
                    GridNoEarningMemberDetails,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetNoEarningMemberTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string AppMaritalstatus, 
                string AppRelation, 
                string AppParentstatus, 
                string RelationName, 
                string RelationshipWithDeceased, 
                string DeceasedStatus, 
                string DeceasedName, 
                string DeceasedFatherHusbandName, 
                string DeceasedDoorNo, 
                string DateofDeath, 
                string Occupation, 
                string ReasonforCertificate, 
                string DeathHappenedDistrict, 
                string DeathHappenedMandal, 
                string DeathHappenedVillage, 
                string ReasonforDeath, 
                string DeathHappenedPlace, 
                string GridNoEarningMemberDetails, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetNoEarningMemberTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    AppMaritalstatus,
                    AppRelation,
                    AppParentstatus,
                    RelationName,
                    RelationshipWithDeceased,
                    DeceasedStatus,
                    DeceasedName,
                    DeceasedFatherHusbandName,
                    DeceasedDoorNo,
                    DateofDeath,
                    Occupation,
                    ReasonforCertificate,
                    DeathHappenedDistrict,
                    DeathHappenedMandal,
                    DeathHappenedVillage,
                    ReasonforDeath,
                    DeathHappenedPlace,
                    GridNoEarningMemberDetails,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetNoEarningMemberTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetNoEarningMemberTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string AppMaritalstatus, 
                string AppRelation, 
                string AppParentstatus, 
                string RelationName, 
                string RelationshipWithDeceased, 
                string DeceasedStatus, 
                string DeceasedName, 
                string DeceasedFatherHusbandName, 
                string DeceasedDoorNo, 
                string DateofDeath, 
                string Occupation, 
                string ReasonforCertificate, 
                string DeathHappenedDistrict, 
                string DeathHappenedMandal, 
                string DeathHappenedVillage, 
                string ReasonforDeath, 
                string DeathHappenedPlace, 
                string GridNoEarningMemberDetails, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        this.GetNoEarningMemberTransactionNoAsync(UserId, Password, LogindID, ServiceID, DocumentRefNumbers, AddressFlag, ApplicationNo, DeliveryType, AppMaritalstatus, AppRelation, AppParentstatus, RelationName, RelationshipWithDeceased, DeceasedStatus, DeceasedName, DeceasedFatherHusbandName, DeceasedDoorNo, DateofDeath, Occupation, ReasonforCertificate, DeathHappenedDistrict, DeathHappenedMandal, DeathHappenedVillage, ReasonforDeath, DeathHappenedPlace, GridNoEarningMemberDetails, StateId, Service_Charge, User_charges, Postal_Charge, Total_Amount, null);
    }
    
    /// <remarks/>
    public void GetNoEarningMemberTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string AppMaritalstatus, 
                string AppRelation, 
                string AppParentstatus, 
                string RelationName, 
                string RelationshipWithDeceased, 
                string DeceasedStatus, 
                string DeceasedName, 
                string DeceasedFatherHusbandName, 
                string DeceasedDoorNo, 
                string DateofDeath, 
                string Occupation, 
                string ReasonforCertificate, 
                string DeathHappenedDistrict, 
                string DeathHappenedMandal, 
                string DeathHappenedVillage, 
                string ReasonforDeath, 
                string DeathHappenedPlace, 
                string GridNoEarningMemberDetails, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                object userState) {
        if ((this.GetNoEarningMemberTransactionNoOperationCompleted == null)) {
            this.GetNoEarningMemberTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNoEarningMemberTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetNoEarningMemberTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    AppMaritalstatus,
                    AppRelation,
                    AppParentstatus,
                    RelationName,
                    RelationshipWithDeceased,
                    DeceasedStatus,
                    DeceasedName,
                    DeceasedFatherHusbandName,
                    DeceasedDoorNo,
                    DateofDeath,
                    Occupation,
                    ReasonforCertificate,
                    DeathHappenedDistrict,
                    DeathHappenedMandal,
                    DeathHappenedVillage,
                    ReasonforDeath,
                    DeathHappenedPlace,
                    GridNoEarningMemberDetails,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, this.GetNoEarningMemberTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetNoEarningMemberTransactionNoOperationCompleted(object arg) {
        if ((this.GetNoEarningMemberTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetNoEarningMemberTransactionNoCompleted(this, new GetNoEarningMemberTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetPossessionTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetPossessionTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string RelationID, 
                string Income, 
                string SurveyNo, 
                string Extent, 
                string ExtentinAcres, 
                string Purpose, 
                string HouseBoundaries_East, 
                string HouseBoundaries_West, 
                string HouseBoundaries_North, 
                string HouseBoundaries_South, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        object[] results = this.Invoke("GetPossessionTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    RelationID,
                    Income,
                    SurveyNo,
                    Extent,
                    ExtentinAcres,
                    Purpose,
                    HouseBoundaries_East,
                    HouseBoundaries_West,
                    HouseBoundaries_North,
                    HouseBoundaries_South,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPossessionTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string RelationID, 
                string Income, 
                string SurveyNo, 
                string Extent, 
                string ExtentinAcres, 
                string Purpose, 
                string HouseBoundaries_East, 
                string HouseBoundaries_West, 
                string HouseBoundaries_North, 
                string HouseBoundaries_South, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetPossessionTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    RelationID,
                    Income,
                    SurveyNo,
                    Extent,
                    ExtentinAcres,
                    Purpose,
                    HouseBoundaries_East,
                    HouseBoundaries_West,
                    HouseBoundaries_North,
                    HouseBoundaries_South,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetPossessionTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetPossessionTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string RelationID, 
                string Income, 
                string SurveyNo, 
                string Extent, 
                string ExtentinAcres, 
                string Purpose, 
                string HouseBoundaries_East, 
                string HouseBoundaries_West, 
                string HouseBoundaries_North, 
                string HouseBoundaries_South, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        this.GetPossessionTransactionNoAsync(UserId, Password, LogindID, ServiceID, DocumentRefNumbers, AddressFlag, ApplicationNo, DeliveryType, RelationID, Income, SurveyNo, Extent, ExtentinAcres, Purpose, HouseBoundaries_East, HouseBoundaries_West, HouseBoundaries_North, HouseBoundaries_South, StateId, Service_Charge, User_charges, Postal_Charge, Total_Amount, null);
    }
    
    /// <remarks/>
    public void GetPossessionTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string RelationID, 
                string Income, 
                string SurveyNo, 
                string Extent, 
                string ExtentinAcres, 
                string Purpose, 
                string HouseBoundaries_East, 
                string HouseBoundaries_West, 
                string HouseBoundaries_North, 
                string HouseBoundaries_South, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                object userState) {
        if ((this.GetPossessionTransactionNoOperationCompleted == null)) {
            this.GetPossessionTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPossessionTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetPossessionTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    RelationID,
                    Income,
                    SurveyNo,
                    Extent,
                    ExtentinAcres,
                    Purpose,
                    HouseBoundaries_East,
                    HouseBoundaries_West,
                    HouseBoundaries_North,
                    HouseBoundaries_South,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, this.GetPossessionTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetPossessionTransactionNoOperationCompleted(object arg) {
        if ((this.GetPossessionTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPossessionTransactionNoCompleted(this, new GetPossessionTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetAgriIncomeTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetAgriIncomeTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string PurposeofIncomeCertificate, 
                string LandlocatedDoorNo, 
                string LandlocatedLocality, 
                string landlocatedDistrict, 
                string LandlocatedMandal, 
                string LandlocatedVillage, 
                string LandlocatedPincode, 
                string StateId, 
                string GridDetailsLand, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        object[] results = this.Invoke("GetAgriIncomeTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    PurposeofIncomeCertificate,
                    LandlocatedDoorNo,
                    LandlocatedLocality,
                    landlocatedDistrict,
                    LandlocatedMandal,
                    LandlocatedVillage,
                    LandlocatedPincode,
                    StateId,
                    GridDetailsLand,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAgriIncomeTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string PurposeofIncomeCertificate, 
                string LandlocatedDoorNo, 
                string LandlocatedLocality, 
                string landlocatedDistrict, 
                string LandlocatedMandal, 
                string LandlocatedVillage, 
                string LandlocatedPincode, 
                string StateId, 
                string GridDetailsLand, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetAgriIncomeTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    PurposeofIncomeCertificate,
                    LandlocatedDoorNo,
                    LandlocatedLocality,
                    landlocatedDistrict,
                    LandlocatedMandal,
                    LandlocatedVillage,
                    LandlocatedPincode,
                    StateId,
                    GridDetailsLand,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetAgriIncomeTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetAgriIncomeTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string PurposeofIncomeCertificate, 
                string LandlocatedDoorNo, 
                string LandlocatedLocality, 
                string landlocatedDistrict, 
                string LandlocatedMandal, 
                string LandlocatedVillage, 
                string LandlocatedPincode, 
                string StateId, 
                string GridDetailsLand, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        this.GetAgriIncomeTransactionNoAsync(UserId, Password, LogindID, ServiceID, DocumentRefNumbers, AddressFlag, ApplicationNo, DeliveryType, Relation, RelationName, PurposeofIncomeCertificate, LandlocatedDoorNo, LandlocatedLocality, landlocatedDistrict, LandlocatedMandal, LandlocatedVillage, LandlocatedPincode, StateId, GridDetailsLand, Service_Charge, User_charges, Postal_Charge, Total_Amount, null);
    }
    
    /// <remarks/>
    public void GetAgriIncomeTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string PurposeofIncomeCertificate, 
                string LandlocatedDoorNo, 
                string LandlocatedLocality, 
                string landlocatedDistrict, 
                string LandlocatedMandal, 
                string LandlocatedVillage, 
                string LandlocatedPincode, 
                string StateId, 
                string GridDetailsLand, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                object userState) {
        if ((this.GetAgriIncomeTransactionNoOperationCompleted == null)) {
            this.GetAgriIncomeTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgriIncomeTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetAgriIncomeTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    PurposeofIncomeCertificate,
                    LandlocatedDoorNo,
                    LandlocatedLocality,
                    landlocatedDistrict,
                    LandlocatedMandal,
                    LandlocatedVillage,
                    LandlocatedPincode,
                    StateId,
                    GridDetailsLand,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, this.GetAgriIncomeTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetAgriIncomeTransactionNoOperationCompleted(object arg) {
        if ((this.GetAgriIncomeTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAgriIncomeTransactionNoCompleted(this, new GetAgriIncomeTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetOBCTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetOBCTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string Religion, 
                string PurposeofCasteCertificate, 
                string FamilyIncome, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        object[] results = this.Invoke("GetOBCTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    Remarks,
                    IssuedCasteCertificateInPast,
                    CasteClaimed,
                    CasteCategory,
                    Religion,
                    PurposeofCasteCertificate,
                    FamilyIncome,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetOBCTransactionNo(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string Religion, 
                string PurposeofCasteCertificate, 
                string FamilyIncome, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetOBCTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    Remarks,
                    IssuedCasteCertificateInPast,
                    CasteClaimed,
                    CasteCategory,
                    Religion,
                    PurposeofCasteCertificate,
                    FamilyIncome,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetOBCTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetOBCTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string Religion, 
                string PurposeofCasteCertificate, 
                string FamilyIncome, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount) {
        this.GetOBCTransactionNoAsync(UserId, Password, LogindID, ServiceID, DocumentRefNumbers, AddressFlag, ApplicationNo, DeliveryType, Relation, RelationName, Remarks, IssuedCasteCertificateInPast, CasteClaimed, CasteCategory, Religion, PurposeofCasteCertificate, FamilyIncome, StateId, Service_Charge, User_charges, Postal_Charge, Total_Amount, null);
    }
    
    /// <remarks/>
    public void GetOBCTransactionNoAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string DocumentRefNumbers, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string Relation, 
                string RelationName, 
                string Remarks, 
                string IssuedCasteCertificateInPast, 
                string CasteClaimed, 
                string CasteCategory, 
                string Religion, 
                string PurposeofCasteCertificate, 
                string FamilyIncome, 
                string StateId, 
                string Service_Charge, 
                string User_charges, 
                string Postal_Charge, 
                string Total_Amount, 
                object userState) {
        if ((this.GetOBCTransactionNoOperationCompleted == null)) {
            this.GetOBCTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOBCTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetOBCTransactionNo", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    DocumentRefNumbers,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    Relation,
                    RelationName,
                    Remarks,
                    IssuedCasteCertificateInPast,
                    CasteClaimed,
                    CasteCategory,
                    Religion,
                    PurposeofCasteCertificate,
                    FamilyIncome,
                    StateId,
                    Service_Charge,
                    User_charges,
                    Postal_Charge,
                    Total_Amount}, this.GetOBCTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetOBCTransactionNoOperationCompleted(object arg) {
        if ((this.GetOBCTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetOBCTransactionNoCompleted(this, new GetOBCTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateDeathReason", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet PopulateDeathReason(string UserId, string Password, string ServiceType) {
        object[] results = this.Invoke("PopulateDeathReason", new object[] {
                    UserId,
                    Password,
                    ServiceType});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateDeathReason(string UserId, string Password, string ServiceType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateDeathReason", new object[] {
                    UserId,
                    Password,
                    ServiceType}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndPopulateDeathReason(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateDeathReasonAsync(string UserId, string Password, string ServiceType) {
        this.PopulateDeathReasonAsync(UserId, Password, ServiceType, null);
    }
    
    /// <remarks/>
    public void PopulateDeathReasonAsync(string UserId, string Password, string ServiceType, object userState) {
        if ((this.PopulateDeathReasonOperationCompleted == null)) {
            this.PopulateDeathReasonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateDeathReasonOperationCompleted);
        }
        this.InvokeAsync("PopulateDeathReason", new object[] {
                    UserId,
                    Password,
                    ServiceType}, this.PopulateDeathReasonOperationCompleted, userState);
    }
    
    private void OnPopulateDeathReasonOperationCompleted(object arg) {
        if ((this.PopulateDeathReasonCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateDeathReasonCompleted(this, new PopulateDeathReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateECDistrict", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet PopulateECDistrict(string UserID, string Password) {
        object[] results = this.Invoke("PopulateECDistrict", new object[] {
                    UserID,
                    Password});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateECDistrict(string UserID, string Password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateECDistrict", new object[] {
                    UserID,
                    Password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndPopulateECDistrict(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateECDistrictAsync(string UserID, string Password) {
        this.PopulateECDistrictAsync(UserID, Password, null);
    }
    
    /// <remarks/>
    public void PopulateECDistrictAsync(string UserID, string Password, object userState) {
        if ((this.PopulateECDistrictOperationCompleted == null)) {
            this.PopulateECDistrictOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateECDistrictOperationCompleted);
        }
        this.InvokeAsync("PopulateECDistrict", new object[] {
                    UserID,
                    Password}, this.PopulateECDistrictOperationCompleted, userState);
    }
    
    private void OnPopulateECDistrictOperationCompleted(object arg) {
        if ((this.PopulateECDistrictCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateECDistrictCompleted(this, new PopulateECDistrictCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateSRO", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet PopulateSRO(string UserID, string Password, string district) {
        object[] results = this.Invoke("PopulateSRO", new object[] {
                    UserID,
                    Password,
                    district});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateSRO(string UserID, string Password, string district, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateSRO", new object[] {
                    UserID,
                    Password,
                    district}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndPopulateSRO(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateSROAsync(string UserID, string Password, string district) {
        this.PopulateSROAsync(UserID, Password, district, null);
    }
    
    /// <remarks/>
    public void PopulateSROAsync(string UserID, string Password, string district, object userState) {
        if ((this.PopulateSROOperationCompleted == null)) {
            this.PopulateSROOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateSROOperationCompleted);
        }
        this.InvokeAsync("PopulateSRO", new object[] {
                    UserID,
                    Password,
                    district}, this.PopulateSROOperationCompleted, userState);
    }
    
    private void OnPopulateSROOperationCompleted(object arg) {
        if ((this.PopulateSROCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateSROCompleted(this, new PopulateSROCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetDocuments", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetDocuments(string UserID, string Password, string District, string SRO1, string RegYear, string DoctNo) {
        object[] results = this.Invoke("GetDocuments", new object[] {
                    UserID,
                    Password,
                    District,
                    SRO1,
                    RegYear,
                    DoctNo});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetDocuments(string UserID, string Password, string District, string SRO1, string RegYear, string DoctNo, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDocuments", new object[] {
                    UserID,
                    Password,
                    District,
                    SRO1,
                    RegYear,
                    DoctNo}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetDocuments(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetDocumentsAsync(string UserID, string Password, string District, string SRO1, string RegYear, string DoctNo) {
        this.GetDocumentsAsync(UserID, Password, District, SRO1, RegYear, DoctNo, null);
    }
    
    /// <remarks/>
    public void GetDocumentsAsync(string UserID, string Password, string District, string SRO1, string RegYear, string DoctNo, object userState) {
        if ((this.GetDocumentsOperationCompleted == null)) {
            this.GetDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsOperationCompleted);
        }
        this.InvokeAsync("GetDocuments", new object[] {
                    UserID,
                    Password,
                    District,
                    SRO1,
                    RegYear,
                    DoctNo}, this.GetDocumentsOperationCompleted, userState);
    }
    
    private void OnGetDocumentsOperationCompleted(object arg) {
        if ((this.GetDocumentsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDocumentsCompleted(this, new GetDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetECtransactionID", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetECtransactionID(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string ApplicantName, 
                string OwnerName, 
                string MobileNo, 
                string PerDoorNo, 
                string PerDistrict, 
                string PerMandal, 
                string PerVillage, 
                string PerPincode, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string User_Charge, 
                string DocDistrict, 
                string DocNo, 
                string DocYear, 
                string FromDate, 
                string ToDate, 
                string BLDG_Flat_No, 
                string BLDG_OldHouseNo, 
                string BLDG_Aprtment, 
                string BLDG_Ward, 
                string BLDG_Block, 
                string BLDG_Village_ID, 
                string BLDG_Alias_Village, 
                string AGRL_PlotNo, 
                string AGRL_SurveyNo, 
                string AGRL_Village_ID, 
                string AGRL_Alias_Village, 
                string BNDR_EAST, 
                string BNDR_WEST, 
                string BNDR_NORTH, 
                string BNDR_SOUTH, 
                string BNDR_Extent, 
                string BNDR_BUILTUP, 
                string EC_Slno, 
                string SROId, 
                string SroJdn, 
                string State) {
        object[] results = this.Invoke("GetECtransactionID", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    ApplicantName,
                    OwnerName,
                    MobileNo,
                    PerDoorNo,
                    PerDistrict,
                    PerMandal,
                    PerVillage,
                    PerPincode,
                    Total_Amount,
                    Service_Charge,
                    Postal_Charge,
                    User_Charge,
                    DocDistrict,
                    DocNo,
                    DocYear,
                    FromDate,
                    ToDate,
                    BLDG_Flat_No,
                    BLDG_OldHouseNo,
                    BLDG_Aprtment,
                    BLDG_Ward,
                    BLDG_Block,
                    BLDG_Village_ID,
                    BLDG_Alias_Village,
                    AGRL_PlotNo,
                    AGRL_SurveyNo,
                    AGRL_Village_ID,
                    AGRL_Alias_Village,
                    BNDR_EAST,
                    BNDR_WEST,
                    BNDR_NORTH,
                    BNDR_SOUTH,
                    BNDR_Extent,
                    BNDR_BUILTUP,
                    EC_Slno,
                    SROId,
                    SroJdn,
                    State});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetECtransactionID(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string ApplicantName, 
                string OwnerName, 
                string MobileNo, 
                string PerDoorNo, 
                string PerDistrict, 
                string PerMandal, 
                string PerVillage, 
                string PerPincode, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string User_Charge, 
                string DocDistrict, 
                string DocNo, 
                string DocYear, 
                string FromDate, 
                string ToDate, 
                string BLDG_Flat_No, 
                string BLDG_OldHouseNo, 
                string BLDG_Aprtment, 
                string BLDG_Ward, 
                string BLDG_Block, 
                string BLDG_Village_ID, 
                string BLDG_Alias_Village, 
                string AGRL_PlotNo, 
                string AGRL_SurveyNo, 
                string AGRL_Village_ID, 
                string AGRL_Alias_Village, 
                string BNDR_EAST, 
                string BNDR_WEST, 
                string BNDR_NORTH, 
                string BNDR_SOUTH, 
                string BNDR_Extent, 
                string BNDR_BUILTUP, 
                string EC_Slno, 
                string SROId, 
                string SroJdn, 
                string State, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetECtransactionID", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    ApplicantName,
                    OwnerName,
                    MobileNo,
                    PerDoorNo,
                    PerDistrict,
                    PerMandal,
                    PerVillage,
                    PerPincode,
                    Total_Amount,
                    Service_Charge,
                    Postal_Charge,
                    User_Charge,
                    DocDistrict,
                    DocNo,
                    DocYear,
                    FromDate,
                    ToDate,
                    BLDG_Flat_No,
                    BLDG_OldHouseNo,
                    BLDG_Aprtment,
                    BLDG_Ward,
                    BLDG_Block,
                    BLDG_Village_ID,
                    BLDG_Alias_Village,
                    AGRL_PlotNo,
                    AGRL_SurveyNo,
                    AGRL_Village_ID,
                    AGRL_Alias_Village,
                    BNDR_EAST,
                    BNDR_WEST,
                    BNDR_NORTH,
                    BNDR_SOUTH,
                    BNDR_Extent,
                    BNDR_BUILTUP,
                    EC_Slno,
                    SROId,
                    SroJdn,
                    State}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetECtransactionID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetECtransactionIDAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string ApplicantName, 
                string OwnerName, 
                string MobileNo, 
                string PerDoorNo, 
                string PerDistrict, 
                string PerMandal, 
                string PerVillage, 
                string PerPincode, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string User_Charge, 
                string DocDistrict, 
                string DocNo, 
                string DocYear, 
                string FromDate, 
                string ToDate, 
                string BLDG_Flat_No, 
                string BLDG_OldHouseNo, 
                string BLDG_Aprtment, 
                string BLDG_Ward, 
                string BLDG_Block, 
                string BLDG_Village_ID, 
                string BLDG_Alias_Village, 
                string AGRL_PlotNo, 
                string AGRL_SurveyNo, 
                string AGRL_Village_ID, 
                string AGRL_Alias_Village, 
                string BNDR_EAST, 
                string BNDR_WEST, 
                string BNDR_NORTH, 
                string BNDR_SOUTH, 
                string BNDR_Extent, 
                string BNDR_BUILTUP, 
                string EC_Slno, 
                string SROId, 
                string SroJdn, 
                string State) {
        this.GetECtransactionIDAsync(UserId, Password, LogindID, ServiceID, AddressFlag, ApplicationNo, DeliveryType, ApplicantName, OwnerName, MobileNo, PerDoorNo, PerDistrict, PerMandal, PerVillage, PerPincode, Total_Amount, Service_Charge, Postal_Charge, User_Charge, DocDistrict, DocNo, DocYear, FromDate, ToDate, BLDG_Flat_No, BLDG_OldHouseNo, BLDG_Aprtment, BLDG_Ward, BLDG_Block, BLDG_Village_ID, BLDG_Alias_Village, AGRL_PlotNo, AGRL_SurveyNo, AGRL_Village_ID, AGRL_Alias_Village, BNDR_EAST, BNDR_WEST, BNDR_NORTH, BNDR_SOUTH, BNDR_Extent, BNDR_BUILTUP, EC_Slno, SROId, SroJdn, State, null);
    }
    
    /// <remarks/>
    public void GetECtransactionIDAsync(
                string UserId, 
                string Password, 
                string LogindID, 
                string ServiceID, 
                string AddressFlag, 
                string ApplicationNo, 
                string DeliveryType, 
                string ApplicantName, 
                string OwnerName, 
                string MobileNo, 
                string PerDoorNo, 
                string PerDistrict, 
                string PerMandal, 
                string PerVillage, 
                string PerPincode, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string User_Charge, 
                string DocDistrict, 
                string DocNo, 
                string DocYear, 
                string FromDate, 
                string ToDate, 
                string BLDG_Flat_No, 
                string BLDG_OldHouseNo, 
                string BLDG_Aprtment, 
                string BLDG_Ward, 
                string BLDG_Block, 
                string BLDG_Village_ID, 
                string BLDG_Alias_Village, 
                string AGRL_PlotNo, 
                string AGRL_SurveyNo, 
                string AGRL_Village_ID, 
                string AGRL_Alias_Village, 
                string BNDR_EAST, 
                string BNDR_WEST, 
                string BNDR_NORTH, 
                string BNDR_SOUTH, 
                string BNDR_Extent, 
                string BNDR_BUILTUP, 
                string EC_Slno, 
                string SROId, 
                string SroJdn, 
                string State, 
                object userState) {
        if ((this.GetECtransactionIDOperationCompleted == null)) {
            this.GetECtransactionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetECtransactionIDOperationCompleted);
        }
        this.InvokeAsync("GetECtransactionID", new object[] {
                    UserId,
                    Password,
                    LogindID,
                    ServiceID,
                    AddressFlag,
                    ApplicationNo,
                    DeliveryType,
                    ApplicantName,
                    OwnerName,
                    MobileNo,
                    PerDoorNo,
                    PerDistrict,
                    PerMandal,
                    PerVillage,
                    PerPincode,
                    Total_Amount,
                    Service_Charge,
                    Postal_Charge,
                    User_Charge,
                    DocDistrict,
                    DocNo,
                    DocYear,
                    FromDate,
                    ToDate,
                    BLDG_Flat_No,
                    BLDG_OldHouseNo,
                    BLDG_Aprtment,
                    BLDG_Ward,
                    BLDG_Block,
                    BLDG_Village_ID,
                    BLDG_Alias_Village,
                    AGRL_PlotNo,
                    AGRL_SurveyNo,
                    AGRL_Village_ID,
                    AGRL_Alias_Village,
                    BNDR_EAST,
                    BNDR_WEST,
                    BNDR_NORTH,
                    BNDR_SOUTH,
                    BNDR_Extent,
                    BNDR_BUILTUP,
                    EC_Slno,
                    SROId,
                    SroJdn,
                    State}, this.GetECtransactionIDOperationCompleted, userState);
    }
    
    private void OnGetECtransactionIDOperationCompleted(object arg) {
        if ((this.GetECtransactionIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetECtransactionIDCompleted(this, new GetECtransactionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetCDMATransNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetCDMATransNo(
                string Service_Id, 
                string ApplicationNumber, 
                string Delivery_Type, 
                string Purpose, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string Cert_Charge, 
                string Sat_Charges, 
                string Service_Type, 
                string RLBType, 
                string Created_By, 
                string Remarks, 
                string NoofCopies, 
                string userId, 
                string password) {
        object[] results = this.Invoke("GetCDMATransNo", new object[] {
                    Service_Id,
                    ApplicationNumber,
                    Delivery_Type,
                    Purpose,
                    Total_Amount,
                    Service_Charge,
                    Postal_Charge,
                    Cert_Charge,
                    Sat_Charges,
                    Service_Type,
                    RLBType,
                    Created_By,
                    Remarks,
                    NoofCopies,
                    userId,
                    password});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCDMATransNo(
                string Service_Id, 
                string ApplicationNumber, 
                string Delivery_Type, 
                string Purpose, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string Cert_Charge, 
                string Sat_Charges, 
                string Service_Type, 
                string RLBType, 
                string Created_By, 
                string Remarks, 
                string NoofCopies, 
                string userId, 
                string password, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetCDMATransNo", new object[] {
                    Service_Id,
                    ApplicationNumber,
                    Delivery_Type,
                    Purpose,
                    Total_Amount,
                    Service_Charge,
                    Postal_Charge,
                    Cert_Charge,
                    Sat_Charges,
                    Service_Type,
                    RLBType,
                    Created_By,
                    Remarks,
                    NoofCopies,
                    userId,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetCDMATransNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetCDMATransNoAsync(
                string Service_Id, 
                string ApplicationNumber, 
                string Delivery_Type, 
                string Purpose, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string Cert_Charge, 
                string Sat_Charges, 
                string Service_Type, 
                string RLBType, 
                string Created_By, 
                string Remarks, 
                string NoofCopies, 
                string userId, 
                string password) {
        this.GetCDMATransNoAsync(Service_Id, ApplicationNumber, Delivery_Type, Purpose, Total_Amount, Service_Charge, Postal_Charge, Cert_Charge, Sat_Charges, Service_Type, RLBType, Created_By, Remarks, NoofCopies, userId, password, null);
    }
    
    /// <remarks/>
    public void GetCDMATransNoAsync(
                string Service_Id, 
                string ApplicationNumber, 
                string Delivery_Type, 
                string Purpose, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string Cert_Charge, 
                string Sat_Charges, 
                string Service_Type, 
                string RLBType, 
                string Created_By, 
                string Remarks, 
                string NoofCopies, 
                string userId, 
                string password, 
                object userState) {
        if ((this.GetCDMATransNoOperationCompleted == null)) {
            this.GetCDMATransNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCDMATransNoOperationCompleted);
        }
        this.InvokeAsync("GetCDMATransNo", new object[] {
                    Service_Id,
                    ApplicationNumber,
                    Delivery_Type,
                    Purpose,
                    Total_Amount,
                    Service_Charge,
                    Postal_Charge,
                    Cert_Charge,
                    Sat_Charges,
                    Service_Type,
                    RLBType,
                    Created_By,
                    Remarks,
                    NoofCopies,
                    userId,
                    password}, this.GetCDMATransNoOperationCompleted, userState);
    }
    
    private void OnGetCDMATransNoOperationCompleted(object arg) {
        if ((this.GetCDMATransNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCDMATransNoCompleted(this, new GetCDMATransNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateCDMABDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable PopulateCDMABDetails(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID) {
        object[] results = this.Invoke("PopulateCDMABDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateCDMABDetails(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateCDMABDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndPopulateCDMABDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateCDMABDetailsAsync(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID) {
        this.PopulateCDMABDetailsAsync(SerTypeID, RegUintID, RegYear, RegNo, userid, password, TestID, null);
    }
    
    /// <remarks/>
    public void PopulateCDMABDetailsAsync(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID, object userState) {
        if ((this.PopulateCDMABDetailsOperationCompleted == null)) {
            this.PopulateCDMABDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateCDMABDetailsOperationCompleted);
        }
        this.InvokeAsync("PopulateCDMABDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID}, this.PopulateCDMABDetailsOperationCompleted, userState);
    }
    
    private void OnPopulateCDMABDetailsOperationCompleted(object arg) {
        if ((this.PopulateCDMABDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateCDMABDetailsCompleted(this, new PopulateCDMABDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateCDMADDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable PopulateCDMADDetails(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID) {
        object[] results = this.Invoke("PopulateCDMADDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateCDMADDetails(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateCDMADDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndPopulateCDMADDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateCDMADDetailsAsync(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID) {
        this.PopulateCDMADDetailsAsync(SerTypeID, RegUintID, RegYear, RegNo, userid, password, TestID, null);
    }
    
    /// <remarks/>
    public void PopulateCDMADDetailsAsync(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID, object userState) {
        if ((this.PopulateCDMADDetailsOperationCompleted == null)) {
            this.PopulateCDMADDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateCDMADDetailsOperationCompleted);
        }
        this.InvokeAsync("PopulateCDMADDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID}, this.PopulateCDMADDetailsOperationCompleted, userState);
    }
    
    private void OnPopulateCDMADDetailsOperationCompleted(object arg) {
        if ((this.PopulateCDMADDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateCDMADDetailsCompleted(this, new PopulateCDMADDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetServiceCharges_CDMA", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable GetServiceCharges_CDMA(string ServiceId, string deliveryType, string rlbType, string NoofCopies, string userid, string password) {
        object[] results = this.Invoke("GetServiceCharges_CDMA", new object[] {
                    ServiceId,
                    deliveryType,
                    rlbType,
                    NoofCopies,
                    userid,
                    password});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServiceCharges_CDMA(string ServiceId, string deliveryType, string rlbType, string NoofCopies, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServiceCharges_CDMA", new object[] {
                    ServiceId,
                    deliveryType,
                    rlbType,
                    NoofCopies,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndGetServiceCharges_CDMA(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void GetServiceCharges_CDMAAsync(string ServiceId, string deliveryType, string rlbType, string NoofCopies, string userid, string password) {
        this.GetServiceCharges_CDMAAsync(ServiceId, deliveryType, rlbType, NoofCopies, userid, password, null);
    }
    
    /// <remarks/>
    public void GetServiceCharges_CDMAAsync(string ServiceId, string deliveryType, string rlbType, string NoofCopies, string userid, string password, object userState) {
        if ((this.GetServiceCharges_CDMAOperationCompleted == null)) {
            this.GetServiceCharges_CDMAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceCharges_CDMAOperationCompleted);
        }
        this.InvokeAsync("GetServiceCharges_CDMA", new object[] {
                    ServiceId,
                    deliveryType,
                    rlbType,
                    NoofCopies,
                    userid,
                    password}, this.GetServiceCharges_CDMAOperationCompleted, userState);
    }
    
    private void OnGetServiceCharges_CDMAOperationCompleted(object arg) {
        if ((this.GetServiceCharges_CDMACompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServiceCharges_CDMACompleted(this, new GetServiceCharges_CDMACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/UpdateUserProfile", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string UpdateUserProfile(string UserId, string Password, string LoginId, string LoginPassword, string UpdatedPassword, string emailid, string mobileno, string address1, string address2, string city, string state, string RoleID) {
        object[] results = this.Invoke("UpdateUserProfile", new object[] {
                    UserId,
                    Password,
                    LoginId,
                    LoginPassword,
                    UpdatedPassword,
                    emailid,
                    mobileno,
                    address1,
                    address2,
                    city,
                    state,
                    RoleID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateUserProfile(string UserId, string Password, string LoginId, string LoginPassword, string UpdatedPassword, string emailid, string mobileno, string address1, string address2, string city, string state, string RoleID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserProfile", new object[] {
                    UserId,
                    Password,
                    LoginId,
                    LoginPassword,
                    UpdatedPassword,
                    emailid,
                    mobileno,
                    address1,
                    address2,
                    city,
                    state,
                    RoleID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUpdateUserProfile(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateUserProfileAsync(string UserId, string Password, string LoginId, string LoginPassword, string UpdatedPassword, string emailid, string mobileno, string address1, string address2, string city, string state, string RoleID) {
        this.UpdateUserProfileAsync(UserId, Password, LoginId, LoginPassword, UpdatedPassword, emailid, mobileno, address1, address2, city, state, RoleID, null);
    }
    
    /// <remarks/>
    public void UpdateUserProfileAsync(string UserId, string Password, string LoginId, string LoginPassword, string UpdatedPassword, string emailid, string mobileno, string address1, string address2, string city, string state, string RoleID, object userState) {
        if ((this.UpdateUserProfileOperationCompleted == null)) {
            this.UpdateUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserProfileOperationCompleted);
        }
        this.InvokeAsync("UpdateUserProfile", new object[] {
                    UserId,
                    Password,
                    LoginId,
                    LoginPassword,
                    UpdatedPassword,
                    emailid,
                    mobileno,
                    address1,
                    address2,
                    city,
                    state,
                    RoleID}, this.UpdateUserProfileOperationCompleted, userState);
    }
    
    private void OnUpdateUserProfileOperationCompleted(object arg) {
        if ((this.UpdateUserProfileCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserProfileCompleted(this, new UpdateUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateCDMABirthDeathDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable PopulateCDMABirthDeathDetails(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID) {
        object[] results = this.Invoke("PopulateCDMABirthDeathDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateCDMABirthDeathDetails(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateCDMABirthDeathDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndPopulateCDMABirthDeathDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateCDMABirthDeathDetailsAsync(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID) {
        this.PopulateCDMABirthDeathDetailsAsync(SerTypeID, RegUintID, RegYear, RegNo, userid, password, TestID, null);
    }
    
    /// <remarks/>
    public void PopulateCDMABirthDeathDetailsAsync(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID, object userState) {
        if ((this.PopulateCDMABirthDeathDetailsOperationCompleted == null)) {
            this.PopulateCDMABirthDeathDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateCDMABirthDeathDetailsOperationCompleted);
        }
        this.InvokeAsync("PopulateCDMABirthDeathDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID}, this.PopulateCDMABirthDeathDetailsOperationCompleted, userState);
    }
    
    private void OnPopulateCDMABirthDeathDetailsOperationCompleted(object arg) {
        if ((this.PopulateCDMABirthDeathDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateCDMABirthDeathDetailsCompleted(this, new PopulateCDMABirthDeathDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateCDMADeathDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable PopulateCDMADeathDetails(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID) {
        object[] results = this.Invoke("PopulateCDMADeathDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateCDMADeathDetails(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateCDMADeathDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndPopulateCDMADeathDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateCDMADeathDetailsAsync(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID) {
        this.PopulateCDMADeathDetailsAsync(SerTypeID, RegUintID, RegYear, RegNo, userid, password, TestID, null);
    }
    
    /// <remarks/>
    public void PopulateCDMADeathDetailsAsync(string SerTypeID, string RegUintID, string RegYear, string RegNo, string userid, string password, string TestID, object userState) {
        if ((this.PopulateCDMADeathDetailsOperationCompleted == null)) {
            this.PopulateCDMADeathDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateCDMADeathDetailsOperationCompleted);
        }
        this.InvokeAsync("PopulateCDMADeathDetails", new object[] {
                    SerTypeID,
                    RegUintID,
                    RegYear,
                    RegNo,
                    userid,
                    password,
                    TestID}, this.PopulateCDMADeathDetailsOperationCompleted, userState);
    }
    
    private void OnPopulateCDMADeathDetailsOperationCompleted(object arg) {
        if ((this.PopulateCDMADeathDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateCDMADeathDetailsCompleted(this, new PopulateCDMADeathDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/SearchCDMABirthDetails_NEW", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable SearchCDMABirthDetails_NEW(string ServiceType, string RUID, string RegYear, string RegNumber, string BirthYear, string Cname, string Fname, string Mname, string HosCode, string Gender, string userid, string password) {
        object[] results = this.Invoke("SearchCDMABirthDetails_NEW", new object[] {
                    ServiceType,
                    RUID,
                    RegYear,
                    RegNumber,
                    BirthYear,
                    Cname,
                    Fname,
                    Mname,
                    HosCode,
                    Gender,
                    userid,
                    password});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchCDMABirthDetails_NEW(string ServiceType, string RUID, string RegYear, string RegNumber, string BirthYear, string Cname, string Fname, string Mname, string HosCode, string Gender, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchCDMABirthDetails_NEW", new object[] {
                    ServiceType,
                    RUID,
                    RegYear,
                    RegNumber,
                    BirthYear,
                    Cname,
                    Fname,
                    Mname,
                    HosCode,
                    Gender,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndSearchCDMABirthDetails_NEW(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void SearchCDMABirthDetails_NEWAsync(string ServiceType, string RUID, string RegYear, string RegNumber, string BirthYear, string Cname, string Fname, string Mname, string HosCode, string Gender, string userid, string password) {
        this.SearchCDMABirthDetails_NEWAsync(ServiceType, RUID, RegYear, RegNumber, BirthYear, Cname, Fname, Mname, HosCode, Gender, userid, password, null);
    }
    
    /// <remarks/>
    public void SearchCDMABirthDetails_NEWAsync(string ServiceType, string RUID, string RegYear, string RegNumber, string BirthYear, string Cname, string Fname, string Mname, string HosCode, string Gender, string userid, string password, object userState) {
        if ((this.SearchCDMABirthDetails_NEWOperationCompleted == null)) {
            this.SearchCDMABirthDetails_NEWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCDMABirthDetails_NEWOperationCompleted);
        }
        this.InvokeAsync("SearchCDMABirthDetails_NEW", new object[] {
                    ServiceType,
                    RUID,
                    RegYear,
                    RegNumber,
                    BirthYear,
                    Cname,
                    Fname,
                    Mname,
                    HosCode,
                    Gender,
                    userid,
                    password}, this.SearchCDMABirthDetails_NEWOperationCompleted, userState);
    }
    
    private void OnSearchCDMABirthDetails_NEWOperationCompleted(object arg) {
        if ((this.SearchCDMABirthDetails_NEWCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchCDMABirthDetails_NEWCompleted(this, new SearchCDMABirthDetails_NEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateSurveyNumber", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string[] PopulateSurveyNumber(string distId, string mandalId, string villageId, string docYear, string userid, string password) {
        object[] results = this.Invoke("PopulateSurveyNumber", new object[] {
                    distId,
                    mandalId,
                    villageId,
                    docYear,
                    userid,
                    password});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateSurveyNumber(string distId, string mandalId, string villageId, string docYear, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateSurveyNumber", new object[] {
                    distId,
                    mandalId,
                    villageId,
                    docYear,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndPopulateSurveyNumber(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void PopulateSurveyNumberAsync(string distId, string mandalId, string villageId, string docYear, string userid, string password) {
        this.PopulateSurveyNumberAsync(distId, mandalId, villageId, docYear, userid, password, null);
    }
    
    /// <remarks/>
    public void PopulateSurveyNumberAsync(string distId, string mandalId, string villageId, string docYear, string userid, string password, object userState) {
        if ((this.PopulateSurveyNumberOperationCompleted == null)) {
            this.PopulateSurveyNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateSurveyNumberOperationCompleted);
        }
        this.InvokeAsync("PopulateSurveyNumber", new object[] {
                    distId,
                    mandalId,
                    villageId,
                    docYear,
                    userid,
                    password}, this.PopulateSurveyNumberOperationCompleted, userState);
    }
    
    private void OnPopulateSurveyNumberOperationCompleted(object arg) {
        if ((this.PopulateSurveyNumberCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateSurveyNumberCompleted(this, new PopulateSurveyNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateAdangaldetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable PopulateAdangaldetails(string distId, string mandalId, string villageId, string docYear, string surveyno, string IsCropDetails, string userid, string password) {
        object[] results = this.Invoke("PopulateAdangaldetails", new object[] {
                    distId,
                    mandalId,
                    villageId,
                    docYear,
                    surveyno,
                    IsCropDetails,
                    userid,
                    password});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateAdangaldetails(string distId, string mandalId, string villageId, string docYear, string surveyno, string IsCropDetails, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateAdangaldetails", new object[] {
                    distId,
                    mandalId,
                    villageId,
                    docYear,
                    surveyno,
                    IsCropDetails,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndPopulateAdangaldetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateAdangaldetailsAsync(string distId, string mandalId, string villageId, string docYear, string surveyno, string IsCropDetails, string userid, string password) {
        this.PopulateAdangaldetailsAsync(distId, mandalId, villageId, docYear, surveyno, IsCropDetails, userid, password, null);
    }
    
    /// <remarks/>
    public void PopulateAdangaldetailsAsync(string distId, string mandalId, string villageId, string docYear, string surveyno, string IsCropDetails, string userid, string password, object userState) {
        if ((this.PopulateAdangaldetailsOperationCompleted == null)) {
            this.PopulateAdangaldetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateAdangaldetailsOperationCompleted);
        }
        this.InvokeAsync("PopulateAdangaldetails", new object[] {
                    distId,
                    mandalId,
                    villageId,
                    docYear,
                    surveyno,
                    IsCropDetails,
                    userid,
                    password}, this.PopulateAdangaldetailsOperationCompleted, userState);
    }
    
    private void OnPopulateAdangaldetailsOperationCompleted(object arg) {
        if ((this.PopulateAdangaldetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateAdangaldetailsCompleted(this, new PopulateAdangaldetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateRORDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable PopulateRORDetails(string distId, string mandalId, string villageId, string kathano, string userid, string password) {
        object[] results = this.Invoke("PopulateRORDetails", new object[] {
                    distId,
                    mandalId,
                    villageId,
                    kathano,
                    userid,
                    password});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateRORDetails(string distId, string mandalId, string villageId, string kathano, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateRORDetails", new object[] {
                    distId,
                    mandalId,
                    villageId,
                    kathano,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndPopulateRORDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateRORDetailsAsync(string distId, string mandalId, string villageId, string kathano, string userid, string password) {
        this.PopulateRORDetailsAsync(distId, mandalId, villageId, kathano, userid, password, null);
    }
    
    /// <remarks/>
    public void PopulateRORDetailsAsync(string distId, string mandalId, string villageId, string kathano, string userid, string password, object userState) {
        if ((this.PopulateRORDetailsOperationCompleted == null)) {
            this.PopulateRORDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateRORDetailsOperationCompleted);
        }
        this.InvokeAsync("PopulateRORDetails", new object[] {
                    distId,
                    mandalId,
                    villageId,
                    kathano,
                    userid,
                    password}, this.PopulateRORDetailsOperationCompleted, userState);
    }
    
    private void OnPopulateRORDetailsOperationCompleted(object arg) {
        if ((this.PopulateRORDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateRORDetailsCompleted(this, new PopulateRORDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/CCGetDocDist", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object[] CCGetDocDist() {
        object[] results = this.Invoke("CCGetDocDist", new object[0]);
        return ((object[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCCGetDocDist(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CCGetDocDist", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public object[] EndCCGetDocDist(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((object[])(results[0]));
    }
    
    /// <remarks/>
    public void CCGetDocDistAsync() {
        this.CCGetDocDistAsync(null);
    }
    
    /// <remarks/>
    public void CCGetDocDistAsync(object userState) {
        if ((this.CCGetDocDistOperationCompleted == null)) {
            this.CCGetDocDistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCCGetDocDistOperationCompleted);
        }
        this.InvokeAsync("CCGetDocDist", new object[0], this.CCGetDocDistOperationCompleted, userState);
    }
    
    private void OnCCGetDocDistOperationCompleted(object arg) {
        if ((this.CCGetDocDistCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CCGetDocDistCompleted(this, new CCGetDocDistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/CCGetDocSRO", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object[] CCGetDocSRO(string distId) {
        object[] results = this.Invoke("CCGetDocSRO", new object[] {
                    distId});
        return ((object[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCCGetDocSRO(string distId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CCGetDocSRO", new object[] {
                    distId}, callback, asyncState);
    }
    
    /// <remarks/>
    public object[] EndCCGetDocSRO(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((object[])(results[0]));
    }
    
    /// <remarks/>
    public void CCGetDocSROAsync(string distId) {
        this.CCGetDocSROAsync(distId, null);
    }
    
    /// <remarks/>
    public void CCGetDocSROAsync(string distId, object userState) {
        if ((this.CCGetDocSROOperationCompleted == null)) {
            this.CCGetDocSROOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCCGetDocSROOperationCompleted);
        }
        this.InvokeAsync("CCGetDocSRO", new object[] {
                    distId}, this.CCGetDocSROOperationCompleted, userState);
    }
    
    private void OnCCGetDocSROOperationCompleted(object arg) {
        if ((this.CCGetDocSROCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CCGetDocSROCompleted(this, new CCGetDocSROCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/CCGetYear", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object[] CCGetYear(int sroCode) {
        object[] results = this.Invoke("CCGetYear", new object[] {
                    sroCode});
        return ((object[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCCGetYear(int sroCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CCGetYear", new object[] {
                    sroCode}, callback, asyncState);
    }
    
    /// <remarks/>
    public object[] EndCCGetYear(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((object[])(results[0]));
    }
    
    /// <remarks/>
    public void CCGetYearAsync(int sroCode) {
        this.CCGetYearAsync(sroCode, null);
    }
    
    /// <remarks/>
    public void CCGetYearAsync(int sroCode, object userState) {
        if ((this.CCGetYearOperationCompleted == null)) {
            this.CCGetYearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCCGetYearOperationCompleted);
        }
        this.InvokeAsync("CCGetYear", new object[] {
                    sroCode}, this.CCGetYearOperationCompleted, userState);
    }
    
    private void OnCCGetYearOperationCompleted(object arg) {
        if ((this.CCGetYearCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CCGetYearCompleted(this, new CCGetYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/CCGetDocList", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object[] CCGetDocList(int sroCode, int sroYear) {
        object[] results = this.Invoke("CCGetDocList", new object[] {
                    sroCode,
                    sroYear});
        return ((object[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCCGetDocList(int sroCode, int sroYear, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CCGetDocList", new object[] {
                    sroCode,
                    sroYear}, callback, asyncState);
    }
    
    /// <remarks/>
    public object[] EndCCGetDocList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((object[])(results[0]));
    }
    
    /// <remarks/>
    public void CCGetDocListAsync(int sroCode, int sroYear) {
        this.CCGetDocListAsync(sroCode, sroYear, null);
    }
    
    /// <remarks/>
    public void CCGetDocListAsync(int sroCode, int sroYear, object userState) {
        if ((this.CCGetDocListOperationCompleted == null)) {
            this.CCGetDocListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCCGetDocListOperationCompleted);
        }
        this.InvokeAsync("CCGetDocList", new object[] {
                    sroCode,
                    sroYear}, this.CCGetDocListOperationCompleted, userState);
    }
    
    private void OnCCGetDocListOperationCompleted(object arg) {
        if ((this.CCGetDocListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CCGetDocListCompleted(this, new CCGetDocListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/CCVerifySign", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string CCVerifySign(string docId, string year, string sroCode) {
        object[] results = this.Invoke("CCVerifySign", new object[] {
                    docId,
                    year,
                    sroCode});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCCVerifySign(string docId, string year, string sroCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CCVerifySign", new object[] {
                    docId,
                    year,
                    sroCode}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCCVerifySign(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CCVerifySignAsync(string docId, string year, string sroCode) {
        this.CCVerifySignAsync(docId, year, sroCode, null);
    }
    
    /// <remarks/>
    public void CCVerifySignAsync(string docId, string year, string sroCode, object userState) {
        if ((this.CCVerifySignOperationCompleted == null)) {
            this.CCVerifySignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCCVerifySignOperationCompleted);
        }
        this.InvokeAsync("CCVerifySign", new object[] {
                    docId,
                    year,
                    sroCode}, this.CCVerifySignOperationCompleted, userState);
    }
    
    private void OnCCVerifySignOperationCompleted(object arg) {
        if ((this.CCVerifySignCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CCVerifySignCompleted(this, new CCVerifySignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/CCGetDocFile", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] CCGetDocFile(string docId, string year, string sro) {
        object[] results = this.Invoke("CCGetDocFile", new object[] {
                    docId,
                    year,
                    sro});
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCCGetDocFile(string docId, string year, string sro, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CCGetDocFile", new object[] {
                    docId,
                    year,
                    sro}, callback, asyncState);
    }
    
    /// <remarks/>
    public byte[] EndCCGetDocFile(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public void CCGetDocFileAsync(string docId, string year, string sro) {
        this.CCGetDocFileAsync(docId, year, sro, null);
    }
    
    /// <remarks/>
    public void CCGetDocFileAsync(string docId, string year, string sro, object userState) {
        if ((this.CCGetDocFileOperationCompleted == null)) {
            this.CCGetDocFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCCGetDocFileOperationCompleted);
        }
        this.InvokeAsync("CCGetDocFile", new object[] {
                    docId,
                    year,
                    sro}, this.CCGetDocFileOperationCompleted, userState);
    }
    
    private void OnCCGetDocFileOperationCompleted(object arg) {
        if ((this.CCGetDocFileCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CCGetDocFileCompleted(this, new CCGetDocFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetUserLoginResponse", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetUserLoginResponse(string UserId, string Password, string LoginId, string LoginPassword, string RoleID) {
        object[] results = this.Invoke("GetUserLoginResponse", new object[] {
                    UserId,
                    Password,
                    LoginId,
                    LoginPassword,
                    RoleID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserLoginResponse(string UserId, string Password, string LoginId, string LoginPassword, string RoleID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserLoginResponse", new object[] {
                    UserId,
                    Password,
                    LoginId,
                    LoginPassword,
                    RoleID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetUserLoginResponse(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserLoginResponseAsync(string UserId, string Password, string LoginId, string LoginPassword, string RoleID) {
        this.GetUserLoginResponseAsync(UserId, Password, LoginId, LoginPassword, RoleID, null);
    }
    
    /// <remarks/>
    public void GetUserLoginResponseAsync(string UserId, string Password, string LoginId, string LoginPassword, string RoleID, object userState) {
        if ((this.GetUserLoginResponseOperationCompleted == null)) {
            this.GetUserLoginResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLoginResponseOperationCompleted);
        }
        this.InvokeAsync("GetUserLoginResponse", new object[] {
                    UserId,
                    Password,
                    LoginId,
                    LoginPassword,
                    RoleID}, this.GetUserLoginResponseOperationCompleted, userState);
    }
    
    private void OnGetUserLoginResponseOperationCompleted(object arg) {
        if ((this.GetUserLoginResponseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserLoginResponseCompleted(this, new GetUserLoginResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/SearchCDMABirthDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable SearchCDMABirthDetails(string ServiceType, string RUID, string RegYear, string RegNumber, string Gender, string userid, string password) {
        object[] results = this.Invoke("SearchCDMABirthDetails", new object[] {
                    ServiceType,
                    RUID,
                    RegYear,
                    RegNumber,
                    Gender,
                    userid,
                    password});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchCDMABirthDetails(string ServiceType, string RUID, string RegYear, string RegNumber, string Gender, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchCDMABirthDetails", new object[] {
                    ServiceType,
                    RUID,
                    RegYear,
                    RegNumber,
                    Gender,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndSearchCDMABirthDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void SearchCDMABirthDetailsAsync(string ServiceType, string RUID, string RegYear, string RegNumber, string Gender, string userid, string password) {
        this.SearchCDMABirthDetailsAsync(ServiceType, RUID, RegYear, RegNumber, Gender, userid, password, null);
    }
    
    /// <remarks/>
    public void SearchCDMABirthDetailsAsync(string ServiceType, string RUID, string RegYear, string RegNumber, string Gender, string userid, string password, object userState) {
        if ((this.SearchCDMABirthDetailsOperationCompleted == null)) {
            this.SearchCDMABirthDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCDMABirthDetailsOperationCompleted);
        }
        this.InvokeAsync("SearchCDMABirthDetails", new object[] {
                    ServiceType,
                    RUID,
                    RegYear,
                    RegNumber,
                    Gender,
                    userid,
                    password}, this.SearchCDMABirthDetailsOperationCompleted, userState);
    }
    
    private void OnSearchCDMABirthDetailsOperationCompleted(object arg) {
        if ((this.SearchCDMABirthDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchCDMABirthDetailsCompleted(this, new SearchCDMABirthDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/PopulateRUIDDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable PopulateRUIDDetails(string LocationType, string DistID, string userid, string password) {
        object[] results = this.Invoke("PopulateRUIDDetails", new object[] {
                    LocationType,
                    DistID,
                    userid,
                    password});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPopulateRUIDDetails(string LocationType, string DistID, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PopulateRUIDDetails", new object[] {
                    LocationType,
                    DistID,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndPopulateRUIDDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void PopulateRUIDDetailsAsync(string LocationType, string DistID, string userid, string password) {
        this.PopulateRUIDDetailsAsync(LocationType, DistID, userid, password, null);
    }
    
    /// <remarks/>
    public void PopulateRUIDDetailsAsync(string LocationType, string DistID, string userid, string password, object userState) {
        if ((this.PopulateRUIDDetailsOperationCompleted == null)) {
            this.PopulateRUIDDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateRUIDDetailsOperationCompleted);
        }
        this.InvokeAsync("PopulateRUIDDetails", new object[] {
                    LocationType,
                    DistID,
                    userid,
                    password}, this.PopulateRUIDDetailsOperationCompleted, userState);
    }
    
    private void OnPopulateRUIDDetailsOperationCompleted(object arg) {
        if ((this.PopulateRUIDDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PopulateRUIDDetailsCompleted(this, new PopulateRUIDDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/SearchCDMADeathDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable SearchCDMADeathDetails(string ServiceType, string RUID, string RegYear, string RegNumber, string Gender, string userid, string password) {
        object[] results = this.Invoke("SearchCDMADeathDetails", new object[] {
                    ServiceType,
                    RUID,
                    RegYear,
                    RegNumber,
                    Gender,
                    userid,
                    password});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchCDMADeathDetails(string ServiceType, string RUID, string RegYear, string RegNumber, string Gender, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchCDMADeathDetails", new object[] {
                    ServiceType,
                    RUID,
                    RegYear,
                    RegNumber,
                    Gender,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndSearchCDMADeathDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void SearchCDMADeathDetailsAsync(string ServiceType, string RUID, string RegYear, string RegNumber, string Gender, string userid, string password) {
        this.SearchCDMADeathDetailsAsync(ServiceType, RUID, RegYear, RegNumber, Gender, userid, password, null);
    }
    
    /// <remarks/>
    public void SearchCDMADeathDetailsAsync(string ServiceType, string RUID, string RegYear, string RegNumber, string Gender, string userid, string password, object userState) {
        if ((this.SearchCDMADeathDetailsOperationCompleted == null)) {
            this.SearchCDMADeathDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCDMADeathDetailsOperationCompleted);
        }
        this.InvokeAsync("SearchCDMADeathDetails", new object[] {
                    ServiceType,
                    RUID,
                    RegYear,
                    RegNumber,
                    Gender,
                    userid,
                    password}, this.SearchCDMADeathDetailsOperationCompleted, userState);
    }
    
    private void OnSearchCDMADeathDetailsOperationCompleted(object arg) {
        if ((this.SearchCDMADeathDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchCDMADeathDetailsCompleted(this, new SearchCDMADeathDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetServiceCharges", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable GetServiceCharges(string ServiceId, string deliveryType, string userid, string password) {
        object[] results = this.Invoke("GetServiceCharges", new object[] {
                    ServiceId,
                    deliveryType,
                    userid,
                    password});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServiceCharges(string ServiceId, string deliveryType, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServiceCharges", new object[] {
                    ServiceId,
                    deliveryType,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndGetServiceCharges(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void GetServiceChargesAsync(string ServiceId, string deliveryType, string userid, string password) {
        this.GetServiceChargesAsync(ServiceId, deliveryType, userid, password, null);
    }
    
    /// <remarks/>
    public void GetServiceChargesAsync(string ServiceId, string deliveryType, string userid, string password, object userState) {
        if ((this.GetServiceChargesOperationCompleted == null)) {
            this.GetServiceChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceChargesOperationCompleted);
        }
        this.InvokeAsync("GetServiceCharges", new object[] {
                    ServiceId,
                    deliveryType,
                    userid,
                    password}, this.GetServiceChargesOperationCompleted, userState);
    }
    
    private void OnGetServiceChargesOperationCompleted(object arg) {
        if ((this.GetServiceChargesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServiceChargesCompleted(this, new GetServiceChargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetAdangalTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetAdangalTransactionNo(AdangalTrans obj, string userId, string password) {
        object[] results = this.Invoke("GetAdangalTransactionNo", new object[] {
                    obj,
                    userId,
                    password});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAdangalTransactionNo(AdangalTrans obj, string userId, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAdangalTransactionNo", new object[] {
                    obj,
                    userId,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetAdangalTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetAdangalTransactionNoAsync(AdangalTrans obj, string userId, string password) {
        this.GetAdangalTransactionNoAsync(obj, userId, password, null);
    }
    
    /// <remarks/>
    public void GetAdangalTransactionNoAsync(AdangalTrans obj, string userId, string password, object userState) {
        if ((this.GetAdangalTransactionNoOperationCompleted == null)) {
            this.GetAdangalTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdangalTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetAdangalTransactionNo", new object[] {
                    obj,
                    userId,
                    password}, this.GetAdangalTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetAdangalTransactionNoOperationCompleted(object arg) {
        if ((this.GetAdangalTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAdangalTransactionNoCompleted(this, new GetAdangalTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetROR1BTransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetROR1BTransactionNo(ROR1BTrans obj, string userId, string password) {
        object[] results = this.Invoke("GetROR1BTransactionNo", new object[] {
                    obj,
                    userId,
                    password});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetROR1BTransactionNo(ROR1BTrans obj, string userId, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetROR1BTransactionNo", new object[] {
                    obj,
                    userId,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetROR1BTransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetROR1BTransactionNoAsync(ROR1BTrans obj, string userId, string password) {
        this.GetROR1BTransactionNoAsync(obj, userId, password, null);
    }
    
    /// <remarks/>
    public void GetROR1BTransactionNoAsync(ROR1BTrans obj, string userId, string password, object userState) {
        if ((this.GetROR1BTransactionNoOperationCompleted == null)) {
            this.GetROR1BTransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetROR1BTransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetROR1BTransactionNo", new object[] {
                    obj,
                    userId,
                    password}, this.GetROR1BTransactionNoOperationCompleted, userState);
    }
    
    private void OnGetROR1BTransactionNoOperationCompleted(object arg) {
        if ((this.GetROR1BTransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetROR1BTransactionNoCompleted(this, new GetROR1BTransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetCDMATransactionNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetCDMATransactionNo(
                string Service_Id, 
                string ApplicationNumber, 
                string informantName, 
                string informantRelation, 
                string informantAddress, 
                string informantPhoneNo, 
                string informantRemarks, 
                string informantPinCode, 
                string Delivery_Type, 
                string Purpose, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string Cert_Charge, 
                string Sat_Charges, 
                string status, 
                string Service_Type, 
                string Data_Available, 
                string RLBType, 
                string Created_By, 
                string Created_Date, 
                string Paid_Date, 
                string Remarks, 
                string DataTampered, 
                string userId, 
                string password) {
        object[] results = this.Invoke("GetCDMATransactionNo", new object[] {
                    Service_Id,
                    ApplicationNumber,
                    informantName,
                    informantRelation,
                    informantAddress,
                    informantPhoneNo,
                    informantRemarks,
                    informantPinCode,
                    Delivery_Type,
                    Purpose,
                    Total_Amount,
                    Service_Charge,
                    Postal_Charge,
                    Cert_Charge,
                    Sat_Charges,
                    status,
                    Service_Type,
                    Data_Available,
                    RLBType,
                    Created_By,
                    Created_Date,
                    Paid_Date,
                    Remarks,
                    DataTampered,
                    userId,
                    password});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCDMATransactionNo(
                string Service_Id, 
                string ApplicationNumber, 
                string informantName, 
                string informantRelation, 
                string informantAddress, 
                string informantPhoneNo, 
                string informantRemarks, 
                string informantPinCode, 
                string Delivery_Type, 
                string Purpose, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string Cert_Charge, 
                string Sat_Charges, 
                string status, 
                string Service_Type, 
                string Data_Available, 
                string RLBType, 
                string Created_By, 
                string Created_Date, 
                string Paid_Date, 
                string Remarks, 
                string DataTampered, 
                string userId, 
                string password, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("GetCDMATransactionNo", new object[] {
                    Service_Id,
                    ApplicationNumber,
                    informantName,
                    informantRelation,
                    informantAddress,
                    informantPhoneNo,
                    informantRemarks,
                    informantPinCode,
                    Delivery_Type,
                    Purpose,
                    Total_Amount,
                    Service_Charge,
                    Postal_Charge,
                    Cert_Charge,
                    Sat_Charges,
                    status,
                    Service_Type,
                    Data_Available,
                    RLBType,
                    Created_By,
                    Created_Date,
                    Paid_Date,
                    Remarks,
                    DataTampered,
                    userId,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetCDMATransactionNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetCDMATransactionNoAsync(
                string Service_Id, 
                string ApplicationNumber, 
                string informantName, 
                string informantRelation, 
                string informantAddress, 
                string informantPhoneNo, 
                string informantRemarks, 
                string informantPinCode, 
                string Delivery_Type, 
                string Purpose, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string Cert_Charge, 
                string Sat_Charges, 
                string status, 
                string Service_Type, 
                string Data_Available, 
                string RLBType, 
                string Created_By, 
                string Created_Date, 
                string Paid_Date, 
                string Remarks, 
                string DataTampered, 
                string userId, 
                string password) {
        this.GetCDMATransactionNoAsync(Service_Id, ApplicationNumber, informantName, informantRelation, informantAddress, informantPhoneNo, informantRemarks, informantPinCode, Delivery_Type, Purpose, Total_Amount, Service_Charge, Postal_Charge, Cert_Charge, Sat_Charges, status, Service_Type, Data_Available, RLBType, Created_By, Created_Date, Paid_Date, Remarks, DataTampered, userId, password, null);
    }
    
    /// <remarks/>
    public void GetCDMATransactionNoAsync(
                string Service_Id, 
                string ApplicationNumber, 
                string informantName, 
                string informantRelation, 
                string informantAddress, 
                string informantPhoneNo, 
                string informantRemarks, 
                string informantPinCode, 
                string Delivery_Type, 
                string Purpose, 
                string Total_Amount, 
                string Service_Charge, 
                string Postal_Charge, 
                string Cert_Charge, 
                string Sat_Charges, 
                string status, 
                string Service_Type, 
                string Data_Available, 
                string RLBType, 
                string Created_By, 
                string Created_Date, 
                string Paid_Date, 
                string Remarks, 
                string DataTampered, 
                string userId, 
                string password, 
                object userState) {
        if ((this.GetCDMATransactionNoOperationCompleted == null)) {
            this.GetCDMATransactionNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCDMATransactionNoOperationCompleted);
        }
        this.InvokeAsync("GetCDMATransactionNo", new object[] {
                    Service_Id,
                    ApplicationNumber,
                    informantName,
                    informantRelation,
                    informantAddress,
                    informantPhoneNo,
                    informantRemarks,
                    informantPinCode,
                    Delivery_Type,
                    Purpose,
                    Total_Amount,
                    Service_Charge,
                    Postal_Charge,
                    Cert_Charge,
                    Sat_Charges,
                    status,
                    Service_Type,
                    Data_Available,
                    RLBType,
                    Created_By,
                    Created_Date,
                    Paid_Date,
                    Remarks,
                    DataTampered,
                    userId,
                    password}, this.GetCDMATransactionNoOperationCompleted, userState);
    }
    
    private void OnGetCDMATransactionNoOperationCompleted(object arg) {
        if ((this.GetCDMATransactionNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCDMATransactionNoCompleted(this, new GetCDMATransactionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/AadharUpdationforApplicationNo", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool AadharUpdationforApplicationNo(string appno, string aadharNo, string userid, string password) {
        object[] results = this.Invoke("AadharUpdationforApplicationNo", new object[] {
                    appno,
                    aadharNo,
                    userid,
                    password});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAadharUpdationforApplicationNo(string appno, string aadharNo, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AadharUpdationforApplicationNo", new object[] {
                    appno,
                    aadharNo,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndAadharUpdationforApplicationNo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void AadharUpdationforApplicationNoAsync(string appno, string aadharNo, string userid, string password) {
        this.AadharUpdationforApplicationNoAsync(appno, aadharNo, userid, password, null);
    }
    
    /// <remarks/>
    public void AadharUpdationforApplicationNoAsync(string appno, string aadharNo, string userid, string password, object userState) {
        if ((this.AadharUpdationforApplicationNoOperationCompleted == null)) {
            this.AadharUpdationforApplicationNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAadharUpdationforApplicationNoOperationCompleted);
        }
        this.InvokeAsync("AadharUpdationforApplicationNo", new object[] {
                    appno,
                    aadharNo,
                    userid,
                    password}, this.AadharUpdationforApplicationNoOperationCompleted, userState);
    }
    
    private void OnAadharUpdationforApplicationNoOperationCompleted(object arg) {
        if ((this.AadharUpdationforApplicationNoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AadharUpdationforApplicationNoCompleted(this, new AadharUpdationforApplicationNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TG.org/GetApplicationDetails", RequestNamespace="http://TG.org/", ResponseNamespace="http://TG.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable GetApplicationDetails(string applicationNo, string userid, string password) {
        object[] results = this.Invoke("GetApplicationDetails", new object[] {
                    applicationNo,
                    userid,
                    password});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetApplicationDetails(string applicationNo, string userid, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetApplicationDetails", new object[] {
                    applicationNo,
                    userid,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndGetApplicationDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void GetApplicationDetailsAsync(string applicationNo, string userid, string password) {
        this.GetApplicationDetailsAsync(applicationNo, userid, password, null);
    }
    
    /// <remarks/>
    public void GetApplicationDetailsAsync(string applicationNo, string userid, string password, object userState) {
        if ((this.GetApplicationDetailsOperationCompleted == null)) {
            this.GetApplicationDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationDetailsOperationCompleted);
        }
        this.InvokeAsync("GetApplicationDetails", new object[] {
                    applicationNo,
                    userid,
                    password}, this.GetApplicationDetailsOperationCompleted, userState);
    }
    
    private void OnGetApplicationDetailsOperationCompleted(object arg) {
        if ((this.GetApplicationDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetApplicationDetailsCompleted(this, new GetApplicationDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://TG.org/")]
public partial class ROR1BTrans {
    
    private string serviceTypeField;
    
    private string application_NumberField;
    
    private string applicant_NameField;
    
    private string applicant_Father_NameField;
    
    private string genderField;
    
    private string applicant_Door_NoField;
    
    private string application_Street_nameField;
    
    private string permanent_StateField;
    
    private string applicant_DistrictField;
    
    private string applicant_MandalField;
    
    private string applicant_VillageField;
    
    private string pin_CodeField;
    
    private string postal_DoorNoField;
    
    private string postal_LocationField;
    
    private string postal_DistrctField;
    
    private string postal_MandalField;
    
    private string postal_VillageField;
    
    private string postal_PincodeField;
    
    private string mobile_NumberField;
    
    private string ration_card_NoField;
    
    private string aadhar_NoField;
    
    private string doc_District_IdField;
    
    private string doc_Mandal_IdField;
    
    private string doc_Village_IdField;
    
    private string doc_KhataNoField;
    
    private string doc_StatusField;
    
    private string delivery_TypeField;
    
    private string service_chargeField;
    
    private string postal_ChargesField;
    
    private string challan_AmountField;
    
    private string challan_DateField;
    
    private string total_AmountField;
    
    private string created_ByField;
    
    private string created_dateField;
    
    private string updated_ByField;
    
    private string udpated_DateField;
    
    private string sLAField;
    
    private string data_AvailableField;
    
    private string stateIdField;
    
    private string emailField;
    
    private string is_ReversalField;
    
    private string sLAENDDateField;
    
    private string sLATypeIDField;
    
    /// <remarks/>
    public string ServiceType {
        get {
            return this.serviceTypeField;
        }
        set {
            this.serviceTypeField = value;
        }
    }
    
    /// <remarks/>
    public string Application_Number {
        get {
            return this.application_NumberField;
        }
        set {
            this.application_NumberField = value;
        }
    }
    
    /// <remarks/>
    public string Applicant_Name {
        get {
            return this.applicant_NameField;
        }
        set {
            this.applicant_NameField = value;
        }
    }
    
    /// <remarks/>
    public string Applicant_Father_Name {
        get {
            return this.applicant_Father_NameField;
        }
        set {
            this.applicant_Father_NameField = value;
        }
    }
    
    /// <remarks/>
    public string Gender {
        get {
            return this.genderField;
        }
        set {
            this.genderField = value;
        }
    }
    
    /// <remarks/>
    public string Applicant_Door_No {
        get {
            return this.applicant_Door_NoField;
        }
        set {
            this.applicant_Door_NoField = value;
        }
    }
    
    /// <remarks/>
    public string Application_Street_name {
        get {
            return this.application_Street_nameField;
        }
        set {
            this.application_Street_nameField = value;
        }
    }
    
    /// <remarks/>
    public string Permanent_State {
        get {
            return this.permanent_StateField;
        }
        set {
            this.permanent_StateField = value;
        }
    }
    
    /// <remarks/>
    public string Applicant_District {
        get {
            return this.applicant_DistrictField;
        }
        set {
            this.applicant_DistrictField = value;
        }
    }
    
    /// <remarks/>
    public string Applicant_Mandal {
        get {
            return this.applicant_MandalField;
        }
        set {
            this.applicant_MandalField = value;
        }
    }
    
    /// <remarks/>
    public string Applicant_Village {
        get {
            return this.applicant_VillageField;
        }
        set {
            this.applicant_VillageField = value;
        }
    }
    
    /// <remarks/>
    public string Pin_Code {
        get {
            return this.pin_CodeField;
        }
        set {
            this.pin_CodeField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_DoorNo {
        get {
            return this.postal_DoorNoField;
        }
        set {
            this.postal_DoorNoField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Location {
        get {
            return this.postal_LocationField;
        }
        set {
            this.postal_LocationField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Distrct {
        get {
            return this.postal_DistrctField;
        }
        set {
            this.postal_DistrctField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Mandal {
        get {
            return this.postal_MandalField;
        }
        set {
            this.postal_MandalField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Village {
        get {
            return this.postal_VillageField;
        }
        set {
            this.postal_VillageField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Pincode {
        get {
            return this.postal_PincodeField;
        }
        set {
            this.postal_PincodeField = value;
        }
    }
    
    /// <remarks/>
    public string Mobile_Number {
        get {
            return this.mobile_NumberField;
        }
        set {
            this.mobile_NumberField = value;
        }
    }
    
    /// <remarks/>
    public string Ration_card_No {
        get {
            return this.ration_card_NoField;
        }
        set {
            this.ration_card_NoField = value;
        }
    }
    
    /// <remarks/>
    public string Aadhar_No {
        get {
            return this.aadhar_NoField;
        }
        set {
            this.aadhar_NoField = value;
        }
    }
    
    /// <remarks/>
    public string Doc_District_Id {
        get {
            return this.doc_District_IdField;
        }
        set {
            this.doc_District_IdField = value;
        }
    }
    
    /// <remarks/>
    public string Doc_Mandal_Id {
        get {
            return this.doc_Mandal_IdField;
        }
        set {
            this.doc_Mandal_IdField = value;
        }
    }
    
    /// <remarks/>
    public string Doc_Village_Id {
        get {
            return this.doc_Village_IdField;
        }
        set {
            this.doc_Village_IdField = value;
        }
    }
    
    /// <remarks/>
    public string Doc_KhataNo {
        get {
            return this.doc_KhataNoField;
        }
        set {
            this.doc_KhataNoField = value;
        }
    }
    
    /// <remarks/>
    public string Doc_Status {
        get {
            return this.doc_StatusField;
        }
        set {
            this.doc_StatusField = value;
        }
    }
    
    /// <remarks/>
    public string Delivery_Type {
        get {
            return this.delivery_TypeField;
        }
        set {
            this.delivery_TypeField = value;
        }
    }
    
    /// <remarks/>
    public string Service_charge {
        get {
            return this.service_chargeField;
        }
        set {
            this.service_chargeField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Charges {
        get {
            return this.postal_ChargesField;
        }
        set {
            this.postal_ChargesField = value;
        }
    }
    
    /// <remarks/>
    public string Challan_Amount {
        get {
            return this.challan_AmountField;
        }
        set {
            this.challan_AmountField = value;
        }
    }
    
    /// <remarks/>
    public string Challan_Date {
        get {
            return this.challan_DateField;
        }
        set {
            this.challan_DateField = value;
        }
    }
    
    /// <remarks/>
    public string Total_Amount {
        get {
            return this.total_AmountField;
        }
        set {
            this.total_AmountField = value;
        }
    }
    
    /// <remarks/>
    public string Created_By {
        get {
            return this.created_ByField;
        }
        set {
            this.created_ByField = value;
        }
    }
    
    /// <remarks/>
    public string Created_date {
        get {
            return this.created_dateField;
        }
        set {
            this.created_dateField = value;
        }
    }
    
    /// <remarks/>
    public string Updated_By {
        get {
            return this.updated_ByField;
        }
        set {
            this.updated_ByField = value;
        }
    }
    
    /// <remarks/>
    public string Udpated_Date {
        get {
            return this.udpated_DateField;
        }
        set {
            this.udpated_DateField = value;
        }
    }
    
    /// <remarks/>
    public string SLA {
        get {
            return this.sLAField;
        }
        set {
            this.sLAField = value;
        }
    }
    
    /// <remarks/>
    public string Data_Available {
        get {
            return this.data_AvailableField;
        }
        set {
            this.data_AvailableField = value;
        }
    }
    
    /// <remarks/>
    public string stateId {
        get {
            return this.stateIdField;
        }
        set {
            this.stateIdField = value;
        }
    }
    
    /// <remarks/>
    public string Email {
        get {
            return this.emailField;
        }
        set {
            this.emailField = value;
        }
    }
    
    /// <remarks/>
    public string Is_Reversal {
        get {
            return this.is_ReversalField;
        }
        set {
            this.is_ReversalField = value;
        }
    }
    
    /// <remarks/>
    public string SLAENDDate {
        get {
            return this.sLAENDDateField;
        }
        set {
            this.sLAENDDateField = value;
        }
    }
    
    /// <remarks/>
    public string SLATypeID {
        get {
            return this.sLATypeIDField;
        }
        set {
            this.sLATypeIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://TG.org/")]
public partial class AdangalTrans {
    
    private string serviceTypeField;
    
    private string applicationNumberField;
    
    private string applicantNameField;
    
    private string applicantName_TeluguField;
    
    private string fatherNameField;
    
    private string fatherName_TeluguField;
    
    private string applicant_SSIDField;
    
    private string father_SSIDField;
    
    private string genderField;
    
    private string dateOfBirthField;
    
    private string permanent_Door_NoField;
    
    private string permanent_LocalityField;
    
    private string permanent_MandalField;
    
    private string permanent_VillageField;
    
    private string permanent_PincodeField;
    
    private string permanent_DistrictField;
    
    private string permanent_Locality_TeluguField;
    
    private string postal_Door_NoField;
    
    private string postal_LocalityField;
    
    private string postal_Locality_TeluguField;
    
    private string postal_MandalField;
    
    private string postal_VillageField;
    
    private string postal_PincodeField;
    
    private string postal_DistrictField;
    
    private string mobileNoField;
    
    private string phoneNoField;
    
    private string emailField;
    
    private string rationCardNoField;
    
    private string aADHARNoField;
    
    private string delivery_TypeField;
    
    private string total_AmountField;
    
    private string service_ChargeField;
    
    private string postal_ChargeField;
    
    private string challan_AmountField;
    
    private string challan_DateField;
    
    private string file_NumberField;
    
    private string statusField;
    
    private string sLAField;
    
    private string docDistrictField;
    
    private string docMandalField;
    
    private string docVillageField;
    
    private string docYearField;
    
    private string docSurveyNoField;
    
    private string dataFlagField;
    
    private string cropFlagField;
    
    private string perstateField;
    
    private string postalStateField;
    
    private string createdbyField;
    
    /// <remarks/>
    public string ServiceType {
        get {
            return this.serviceTypeField;
        }
        set {
            this.serviceTypeField = value;
        }
    }
    
    /// <remarks/>
    public string ApplicationNumber {
        get {
            return this.applicationNumberField;
        }
        set {
            this.applicationNumberField = value;
        }
    }
    
    /// <remarks/>
    public string ApplicantName {
        get {
            return this.applicantNameField;
        }
        set {
            this.applicantNameField = value;
        }
    }
    
    /// <remarks/>
    public string ApplicantName_Telugu {
        get {
            return this.applicantName_TeluguField;
        }
        set {
            this.applicantName_TeluguField = value;
        }
    }
    
    /// <remarks/>
    public string FatherName {
        get {
            return this.fatherNameField;
        }
        set {
            this.fatherNameField = value;
        }
    }
    
    /// <remarks/>
    public string FatherName_Telugu {
        get {
            return this.fatherName_TeluguField;
        }
        set {
            this.fatherName_TeluguField = value;
        }
    }
    
    /// <remarks/>
    public string Applicant_SSID {
        get {
            return this.applicant_SSIDField;
        }
        set {
            this.applicant_SSIDField = value;
        }
    }
    
    /// <remarks/>
    public string Father_SSID {
        get {
            return this.father_SSIDField;
        }
        set {
            this.father_SSIDField = value;
        }
    }
    
    /// <remarks/>
    public string Gender {
        get {
            return this.genderField;
        }
        set {
            this.genderField = value;
        }
    }
    
    /// <remarks/>
    public string DateOfBirth {
        get {
            return this.dateOfBirthField;
        }
        set {
            this.dateOfBirthField = value;
        }
    }
    
    /// <remarks/>
    public string Permanent_Door_No {
        get {
            return this.permanent_Door_NoField;
        }
        set {
            this.permanent_Door_NoField = value;
        }
    }
    
    /// <remarks/>
    public string Permanent_Locality {
        get {
            return this.permanent_LocalityField;
        }
        set {
            this.permanent_LocalityField = value;
        }
    }
    
    /// <remarks/>
    public string Permanent_Mandal {
        get {
            return this.permanent_MandalField;
        }
        set {
            this.permanent_MandalField = value;
        }
    }
    
    /// <remarks/>
    public string Permanent_Village {
        get {
            return this.permanent_VillageField;
        }
        set {
            this.permanent_VillageField = value;
        }
    }
    
    /// <remarks/>
    public string Permanent_Pincode {
        get {
            return this.permanent_PincodeField;
        }
        set {
            this.permanent_PincodeField = value;
        }
    }
    
    /// <remarks/>
    public string Permanent_District {
        get {
            return this.permanent_DistrictField;
        }
        set {
            this.permanent_DistrictField = value;
        }
    }
    
    /// <remarks/>
    public string Permanent_Locality_Telugu {
        get {
            return this.permanent_Locality_TeluguField;
        }
        set {
            this.permanent_Locality_TeluguField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Door_No {
        get {
            return this.postal_Door_NoField;
        }
        set {
            this.postal_Door_NoField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Locality {
        get {
            return this.postal_LocalityField;
        }
        set {
            this.postal_LocalityField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Locality_Telugu {
        get {
            return this.postal_Locality_TeluguField;
        }
        set {
            this.postal_Locality_TeluguField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Mandal {
        get {
            return this.postal_MandalField;
        }
        set {
            this.postal_MandalField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Village {
        get {
            return this.postal_VillageField;
        }
        set {
            this.postal_VillageField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Pincode {
        get {
            return this.postal_PincodeField;
        }
        set {
            this.postal_PincodeField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_District {
        get {
            return this.postal_DistrictField;
        }
        set {
            this.postal_DistrictField = value;
        }
    }
    
    /// <remarks/>
    public string MobileNo {
        get {
            return this.mobileNoField;
        }
        set {
            this.mobileNoField = value;
        }
    }
    
    /// <remarks/>
    public string PhoneNo {
        get {
            return this.phoneNoField;
        }
        set {
            this.phoneNoField = value;
        }
    }
    
    /// <remarks/>
    public string Email {
        get {
            return this.emailField;
        }
        set {
            this.emailField = value;
        }
    }
    
    /// <remarks/>
    public string RationCardNo {
        get {
            return this.rationCardNoField;
        }
        set {
            this.rationCardNoField = value;
        }
    }
    
    /// <remarks/>
    public string AADHARNo {
        get {
            return this.aADHARNoField;
        }
        set {
            this.aADHARNoField = value;
        }
    }
    
    /// <remarks/>
    public string Delivery_Type {
        get {
            return this.delivery_TypeField;
        }
        set {
            this.delivery_TypeField = value;
        }
    }
    
    /// <remarks/>
    public string Total_Amount {
        get {
            return this.total_AmountField;
        }
        set {
            this.total_AmountField = value;
        }
    }
    
    /// <remarks/>
    public string Service_Charge {
        get {
            return this.service_ChargeField;
        }
        set {
            this.service_ChargeField = value;
        }
    }
    
    /// <remarks/>
    public string Postal_Charge {
        get {
            return this.postal_ChargeField;
        }
        set {
            this.postal_ChargeField = value;
        }
    }
    
    /// <remarks/>
    public string Challan_Amount {
        get {
            return this.challan_AmountField;
        }
        set {
            this.challan_AmountField = value;
        }
    }
    
    /// <remarks/>
    public string Challan_Date {
        get {
            return this.challan_DateField;
        }
        set {
            this.challan_DateField = value;
        }
    }
    
    /// <remarks/>
    public string File_Number {
        get {
            return this.file_NumberField;
        }
        set {
            this.file_NumberField = value;
        }
    }
    
    /// <remarks/>
    public string Status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
    
    /// <remarks/>
    public string SLA {
        get {
            return this.sLAField;
        }
        set {
            this.sLAField = value;
        }
    }
    
    /// <remarks/>
    public string DocDistrict {
        get {
            return this.docDistrictField;
        }
        set {
            this.docDistrictField = value;
        }
    }
    
    /// <remarks/>
    public string DocMandal {
        get {
            return this.docMandalField;
        }
        set {
            this.docMandalField = value;
        }
    }
    
    /// <remarks/>
    public string DocVillage {
        get {
            return this.docVillageField;
        }
        set {
            this.docVillageField = value;
        }
    }
    
    /// <remarks/>
    public string DocYear {
        get {
            return this.docYearField;
        }
        set {
            this.docYearField = value;
        }
    }
    
    /// <remarks/>
    public string DocSurveyNo {
        get {
            return this.docSurveyNoField;
        }
        set {
            this.docSurveyNoField = value;
        }
    }
    
    /// <remarks/>
    public string DataFlag {
        get {
            return this.dataFlagField;
        }
        set {
            this.dataFlagField = value;
        }
    }
    
    /// <remarks/>
    public string CropFlag {
        get {
            return this.cropFlagField;
        }
        set {
            this.cropFlagField = value;
        }
    }
    
    /// <remarks/>
    public string Perstate {
        get {
            return this.perstateField;
        }
        set {
            this.perstateField = value;
        }
    }
    
    /// <remarks/>
    public string PostalState {
        get {
            return this.postalStateField;
        }
        set {
            this.postalStateField = value;
        }
    }
    
    /// <remarks/>
    public string Createdby {
        get {
            return this.createdbyField;
        }
        set {
            this.createdbyField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void NewUserRegistrationCompletedEventHandler(object sender, NewUserRegistrationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NewUserRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NewUserRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetUserProfileCompletedEventHandler(object sender, GetUserProfileCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void RESETMPINCompletedEventHandler(object sender, RESETMPINCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RESETMPINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RESETMPINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetAadharDocumentRefDetailsCompletedEventHandler(object sender, GetAadharDocumentRefDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAadharDocumentRefDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAadharDocumentRefDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetDetailsByAadharNoDocumentpathCompletedEventHandler(object sender, GetDetailsByAadharNoDocumentpathCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetDetailsByAadharNoDocumentpathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDetailsByAadharNoDocumentpathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GenerateApplicationNOCompletedEventHandler(object sender, GenerateApplicationNOCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GenerateApplicationNOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GenerateApplicationNOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetShowpaymentChargesCompletedEventHandler(object sender, GetShowpaymentChargesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetShowpaymentChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetShowpaymentChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetIncomeTransactionNoCompletedEventHandler(object sender, GetIncomeTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetIncomeTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetIncomeTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetEBCTransactionNoCompletedEventHandler(object sender, GetEBCTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetEBCTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetEBCTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetIntegratedTransactionNoCompletedEventHandler(object sender, GetIntegratedTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetIntegratedTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetIntegratedTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetFamilyMembershipTransactionNoCompletedEventHandler(object sender, GetFamilyMembershipTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetFamilyMembershipTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetFamilyMembershipTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateCasteCompletedEventHandler(object sender, PopulateCasteCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateCasteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateCasteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateCasteCategoryCompletedEventHandler(object sender, PopulateCasteCategoryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateCasteCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateCasteCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateOccupationCompletedEventHandler(object sender, PopulateOccupationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateOccupationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateOccupationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateReasonforCertificateCompletedEventHandler(object sender, PopulateReasonforCertificateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateReasonforCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateReasonforCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetResidanceTransactionNoCompletedEventHandler(object sender, GetResidanceTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResidanceTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResidanceTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetNoEarningMemberTransactionNoCompletedEventHandler(object sender, GetNoEarningMemberTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetNoEarningMemberTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetNoEarningMemberTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetPossessionTransactionNoCompletedEventHandler(object sender, GetPossessionTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPossessionTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPossessionTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetAgriIncomeTransactionNoCompletedEventHandler(object sender, GetAgriIncomeTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAgriIncomeTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAgriIncomeTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetOBCTransactionNoCompletedEventHandler(object sender, GetOBCTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetOBCTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetOBCTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateDeathReasonCompletedEventHandler(object sender, PopulateDeathReasonCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateDeathReasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateDeathReasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateECDistrictCompletedEventHandler(object sender, PopulateECDistrictCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateECDistrictCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateECDistrictCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateSROCompletedEventHandler(object sender, PopulateSROCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateSROCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateSROCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetDocumentsCompletedEventHandler(object sender, GetDocumentsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetECtransactionIDCompletedEventHandler(object sender, GetECtransactionIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetECtransactionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetECtransactionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetCDMATransNoCompletedEventHandler(object sender, GetCDMATransNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCDMATransNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCDMATransNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateCDMABDetailsCompletedEventHandler(object sender, PopulateCDMABDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateCDMABDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateCDMABDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateCDMADDetailsCompletedEventHandler(object sender, PopulateCDMADDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateCDMADDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateCDMADDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetServiceCharges_CDMACompletedEventHandler(object sender, GetServiceCharges_CDMACompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetServiceCharges_CDMACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServiceCharges_CDMACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void UpdateUserProfileCompletedEventHandler(object sender, UpdateUserProfileCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateCDMABirthDeathDetailsCompletedEventHandler(object sender, PopulateCDMABirthDeathDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateCDMABirthDeathDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateCDMABirthDeathDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateCDMADeathDetailsCompletedEventHandler(object sender, PopulateCDMADeathDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateCDMADeathDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateCDMADeathDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void SearchCDMABirthDetails_NEWCompletedEventHandler(object sender, SearchCDMABirthDetails_NEWCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SearchCDMABirthDetails_NEWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SearchCDMABirthDetails_NEWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateSurveyNumberCompletedEventHandler(object sender, PopulateSurveyNumberCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateSurveyNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateSurveyNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateAdangaldetailsCompletedEventHandler(object sender, PopulateAdangaldetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateAdangaldetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateAdangaldetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateRORDetailsCompletedEventHandler(object sender, PopulateRORDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateRORDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateRORDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void CCGetDocDistCompletedEventHandler(object sender, CCGetDocDistCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CCGetDocDistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CCGetDocDistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void CCGetDocSROCompletedEventHandler(object sender, CCGetDocSROCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CCGetDocSROCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CCGetDocSROCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void CCGetYearCompletedEventHandler(object sender, CCGetYearCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CCGetYearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CCGetYearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void CCGetDocListCompletedEventHandler(object sender, CCGetDocListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CCGetDocListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CCGetDocListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void CCVerifySignCompletedEventHandler(object sender, CCVerifySignCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CCVerifySignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CCVerifySignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void CCGetDocFileCompletedEventHandler(object sender, CCGetDocFileCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CCGetDocFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CCGetDocFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetUserLoginResponseCompletedEventHandler(object sender, GetUserLoginResponseCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserLoginResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserLoginResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void SearchCDMABirthDetailsCompletedEventHandler(object sender, SearchCDMABirthDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SearchCDMABirthDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SearchCDMABirthDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void PopulateRUIDDetailsCompletedEventHandler(object sender, PopulateRUIDDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PopulateRUIDDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PopulateRUIDDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void SearchCDMADeathDetailsCompletedEventHandler(object sender, SearchCDMADeathDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SearchCDMADeathDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SearchCDMADeathDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetServiceChargesCompletedEventHandler(object sender, GetServiceChargesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetServiceChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServiceChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetAdangalTransactionNoCompletedEventHandler(object sender, GetAdangalTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAdangalTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAdangalTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetROR1BTransactionNoCompletedEventHandler(object sender, GetROR1BTransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetROR1BTransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetROR1BTransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetCDMATransactionNoCompletedEventHandler(object sender, GetCDMATransactionNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCDMATransactionNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCDMATransactionNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void AadharUpdationforApplicationNoCompletedEventHandler(object sender, AadharUpdationforApplicationNoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AadharUpdationforApplicationNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AadharUpdationforApplicationNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetApplicationDetailsCompletedEventHandler(object sender, GetApplicationDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetApplicationDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetApplicationDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}
